[metadata]
name = xarray
author = xarray Developers
author_email = xarray@googlegroups.com
license = Apache
description = N-D labeled arrays and datasets in Python
long_description_content_type=text/x-rst
long_description =
    **xarray** (formerly **xray**) is an open source project and Python package
    that makes working with labelled multi-dimensional arrays simple,
    efficient, and fun!

    xarray introduces labels in the form of dimensions, coordinates and
    attributes on top of raw NumPy_-like arrays, which allows for a more
    intuitive, more concise, and less error-prone developer experience.
    The package includes a large and growing library of domain-agnostic functions
    for advanced analytics and visualization with these data structures.

    xarray was inspired by and borrows heavily from pandas_, the popular data
    analysis package focused on labelled tabular data.
    It is particularly tailored to working with netCDF_ files, which were the
    source of xarray's data model, and integrates tightly with dask_ for parallel
    computing.

    .. _NumPy: https://www.numpy.org
    .. _pandas: https://pandas.pydata.org
    .. _dask: https://dask.org
    .. _netCDF: https://www.unidata.ucar.edu/software/netcdf

    Why xarray?
    -----------
    Multi-dimensional (a.k.a. N-dimensional, ND) arrays (sometimes called
    "tensors") are an essential part of computational science.
    They are encountered in a wide range of fields, including physics, astronomy,
    geoscience, bioinformatics, engineering, finance, and deep learning.
    In Python, NumPy_ provides the fundamental data structure and API for
    working with raw ND arrays.
    However, real-world datasets are usually more than just raw numbers;
    they have labels which encode information about how the array values map
    to locations in space, time, etc.

    xarray doesn't just keep track of labels on arrays -- it uses them to provide a
    powerful and concise interface. For example:

    -  Apply operations over dimensions by name: ``x.sum('time')``.
    -  Select values by label instead of integer location: ``x.loc['2014-01-01']`` or ``x.sel(time='2014-01-01')``.
    -  Mathematical operations (e.g., ``x - y``) vectorize across multiple dimensions (array broadcasting) based on dimension names, not shape.
    -  Flexible split-apply-combine operations with groupby: ``x.groupby('time.dayofyear').mean()``.
    -  Database like alignment based on coordinate labels that smoothly handles missing values: ``x, y = xr.align(x, y, join='outer')``.
    -  Keep track of arbitrary metadata in the form of a Python dictionary: ``x.attrs``.

    Learn more
    ----------
    - Documentation: `<http://xarray.pydata.org>`_
    - Issue tracker: `<http://github.com/pydata/xarray/issues>`_
    - Source code: `<http://github.com/pydata/xarray>`_
    - SciPy2015 talk: `<https://www.youtube.com/watch?v=X0pAhJgySxk>`_

url = https://github.com/pydata/xarray
classifiers =
    Development Status :: 5 - Production/Stable
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
    Intended Audience :: Science/Research
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Topic :: Scientific/Engineering

[options]
packages = find:
zip_safe = False  # https://mypy.readthedocs.io/en/latest/installed_packages.html
include_package_data = True
python_requires = >=3.6
install_requires =
    numpy >= 1.15
    pandas >= 0.25
    setuptools >= 38.4  # For pkg_resources
setup_requires =
    setuptools >= 38.4
    setuptools_scm

[options.package_data]
xarray =
    py.typed
    tests/data/*
    static/css/*
    static/html/*

[tool:pytest]
python_files = test_*.py
testpaths = xarray/tests properties
# Fixed upstream in https://github.com/pydata/bottleneck/pull/199
filterwarnings =
    ignore:Using a non-tuple sequence for multidimensional indexing is deprecated:FutureWarning
markers =
    flaky: flaky tests
    network: tests requiring a network connection
    slow: slow tests

[flake8]
ignore =
    E203 # whitespace before ':' - doesn't work well with black
    E402 # module level import not at top of file
    E501 # line too long - let black worry about that
    E731 # do not assign a lambda expression, use a def
    W503 # line break before binary operator
exclude=
    .eggs
    doc

[isort]
default_section = THIRDPARTY
known_first_party = xarray
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
line_length = 88

# Most of the numerical computing stack doesn't have type annotations yet.
[mypy-affine.*]
ignore_missing_imports = True
[mypy-bottleneck.*]
ignore_missing_imports = True
[mypy-cdms2.*]
ignore_missing_imports = True
[mypy-cf_units.*]
ignore_missing_imports = True
[mypy-cfgrib.*]
ignore_missing_imports = True
[mypy-cftime.*]
ignore_missing_imports = True
[mypy-cupy.*]
ignore_missing_imports = True
[mypy-dask.*]
ignore_missing_imports = True
[mypy-distributed.*]
ignore_missing_imports = True
[mypy-h5netcdf.*]
ignore_missing_imports = True
[mypy-h5py.*]
ignore_missing_imports = True
[mypy-iris.*]
ignore_missing_imports = True
[mypy-matplotlib.*]
ignore_missing_imports = True
[mypy-Nio.*]
ignore_missing_imports = True
[mypy-nc_time_axis.*]
ignore_missing_imports = True
[mypy-numbagg.*]
ignore_missing_imports = True
[mypy-numpy.*]
ignore_missing_imports = True
[mypy-netCDF4.*]
ignore_missing_imports = True
[mypy-netcdftime.*]
ignore_missing_imports = True
[mypy-pandas.*]
ignore_missing_imports = True
[mypy-pint.*]
ignore_missing_imports = True
[mypy-PseudoNetCDF.*]
ignore_missing_imports = True
[mypy-pydap.*]
ignore_missing_imports = True
[mypy-pytest.*]
ignore_missing_imports = True
[mypy-rasterio.*]
ignore_missing_imports = True
[mypy-scipy.*]
ignore_missing_imports = True
[mypy-seaborn.*]
ignore_missing_imports = True
[mypy-setuptools]
ignore_missing_imports = True
[mypy-sparse.*]
ignore_missing_imports = True
[mypy-toolz.*]
ignore_missing_imports = True
[mypy-zarr.*]
ignore_missing_imports = True
# version spanning code is hard to type annotate (and most of this module will
# be going away soon anyways)
[mypy-xarray.core.pycompat]
ignore_errors = True

[aliases]
test = pytest

[pytest-watch]
nobeep = True
