xarray/util/print_versions.py: note: In function "get_sys_info":
xarray/util/print_versions.py:32: error: Incompatible types in assignment (expression has type "str", variable has type "Optional[bytes]")  [assignment]
xarray/util/print_versions.py:35: error: Argument 1 to "strip" of "bytes" has incompatible type "str"; expected "Optional[Buffer]"  [arg-type]
xarray/util/print_versions.py:43: error: List item 0 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:44: error: List item 1 has incompatible type "tuple[str, int]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:45: error: List item 2 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:46: error: List item 3 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:48: error: List item 4 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:49: error: List item 5 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:50: error: List item 6 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:51: error: List item 7 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:52: error: List item 8 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py:53: error: List item 9 has incompatible type "tuple[str, str]"; expected "tuple[str, Optional[bytes]]"  [list-item]
xarray/util/print_versions.py: note: In function "show_versions":
xarray/util/print_versions.py:150: error: Argument 1 to "append" of "list" has incompatible type "tuple[str, str]"; expected "tuple[str, None]"  [arg-type]
xarray/backends/locks.py: note: In function "_get_lock_maker":
xarray/backends/locks.py:65: error: Cannot assign to a type  [misc]
xarray/backends/locks.py:65: error: Incompatible types in assignment (expression has type "None", variable has type "type[Lock]")  [assignment]
xarray/backends/locks.py: note: In function "combine_locks":
xarray/backends/locks.py:197: error: Need type annotation for "all_locks" (hint: "all_locks: List[<type>] = ...")  [var-annotated]
xarray/core/options.py: note: In member "__init__" of class "set_options":
xarray/core/options.py:275: error: TypedDict key must be a string literal; expected one of ("arithmetic_join", "cmap_divergent", "cmap_sequential", "display_max_rows", "display_values_threshold", ...)  [literal-required]
xarray/core/dtypes.py: note: In function "maybe_promote":
xarray/core/dtypes.py:66: error: Incompatible types in assignment (expression has type "timedelta64", variable has type "float")  [assignment]
xarray/core/dtypes.py:71: error: Incompatible types in assignment (expression has type "complex", variable has type "float")  [assignment]
xarray/core/dtypes.py:73: error: Incompatible types in assignment (expression has type "datetime64", variable has type "float")  [assignment]
xarray/core/nputils.py: note: In function "_advanced_indexer_subspaces":
xarray/core/nputils.py:136: error: <nothing> has no attribute "shape"  [attr-defined]
xarray/core/ops.py: note: In function "where_method":
xarray/core/ops.py:184: error: Argument "join" to "apply_ufunc" has incompatible type "str"; expected "Literal['outer', 'inner', 'left', 'right', 'exact', 'override']"  [arg-type]
xarray/core/indexing.py: note: In member "__init__" of class "OuterIndexer":
xarray/core/indexing.py:382: error: <nothing> has no attribute "dtype"  [attr-defined]
xarray/core/indexing.py:386: error: <nothing> has no attribute "ndim"  [attr-defined]
xarray/core/indexing.py:391: error: <nothing> has no attribute "astype"  [attr-defined]
xarray/core/indexing.py: note: In member "__init__" of class "VectorizedIndexer":
xarray/core/indexing.py:429: error: <nothing> has no attribute "dtype"  [attr-defined]
xarray/core/indexing.py:434: error: <nothing> has no attribute "ndim"  [attr-defined]
xarray/core/indexing.py:441: error: <nothing> has no attribute "astype"  [attr-defined]
xarray/core/indexing.py: note: In member "get_duck_array" of class "ExplicitlyIndexed":
xarray/core/indexing.py:461: error: "ExplicitlyIndexed" has no attribute "array"  [attr-defined]
xarray/core/indexing.py: note: In member "__init__" of class "LazilyIndexedArray":
xarray/core/indexing.py:520: error: Cannot determine type of "key"  [has-type]
xarray/core/indexing.py:521: error: Cannot determine type of "array"  [has-type]
xarray/core/indexing.py: note: In member "_updated_key" of class "LazilyIndexedArray":
xarray/core/indexing.py:537: error: Incompatible types in assignment (expression has type "tuple[Union[int, integer[Any]], ...]", variable has type "list[Union[int, integer[Any]]]")  [assignment]
xarray/core/indexing.py: note: In member "_indexing_array_and_key" of class "NumpyIndexingAdapter":
xarray/core/indexing.py:1318: error: Incompatible types in assignment (expression has type "NumpyVIndexAdapter", variable has type "ndarray[Any, Any]")  [assignment]
xarray/core/formatting.py: note: In function "format_item":
xarray/core/formatting.py:164: error: Item "str" of "Union[str, bytes]" has no attribute "item"  [union-attr]
xarray/core/formatting.py:164: error: Item "bytes" of "Union[str, bytes]" has no attribute "item"  [union-attr]
xarray/core/formatting.py: note: In function "_mapping_repr":
xarray/core/formatting.py:358: error: Need type annotation for "summarizer_kwargs"  [var-annotated]
xarray/core/formatting.py:360: error: Incompatible types in assignment (expression has type "dict[Any, dict[str, bool]]", variable has type "defaultdict[Any, dict[Any, Any]]")  [assignment]
xarray/core/formatting.py: note: In function "short_array_repr":
xarray/core/formatting.py:590: error: "AbstractArray" has no attribute "data"  [attr-defined]
xarray/core/formatting.py: note: In function "_diff_mapping_repr":
xarray/core/formatting.py:759: error: Need type annotation for "a_summarizer_kwargs"  [var-annotated]
xarray/core/formatting.py:761: error: Incompatible types in assignment (expression has type "dict[Any, dict[str, bool]]", variable has type "defaultdict[Any, dict[Any, Any]]")  [assignment]
xarray/core/formatting.py:762: error: Need type annotation for "b_summarizer_kwargs"  [var-annotated]
xarray/core/formatting.py:764: error: Incompatible types in assignment (expression has type "dict[Any, dict[str, bool]]", variable has type "defaultdict[Any, dict[Any, Any]]")  [assignment]
xarray/plot/utils.py: note: In function "_determine_cmap_params":
xarray/plot/utils.py:233: error: Value of type "Iterable[Any]" is not indexable  [index]
xarray/plot/utils.py:283: error: No overload variant of "linspace" matches argument types "Any", "Any", "Hashable"  [call-overload]
xarray/plot/utils.py:283: note: Possible overload variants:
xarray/plot/utils.py:283: note:     def linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]]], bool, int, float, _NestedSequence[Union[bool, int, float]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]]], bool, int, float, _NestedSequence[Union[bool, int, float]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[False] = ..., dtype: None = ..., axis: SupportsIndex = ...) -> ndarray[Any, dtype[floating[Any]]]
xarray/plot/utils.py:283: note:     def linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[False] = ..., dtype: None = ..., axis: SupportsIndex = ...) -> ndarray[Any, dtype[complexfloating[Any, Any]]]
xarray/plot/utils.py:283: note:     def [_SCT <: generic] linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[False] = ..., dtype: Union[dtype[_SCT], type[_SCT], _SupportsDType[dtype[_SCT]]] = ..., axis: SupportsIndex = ...) -> ndarray[Any, dtype[_SCT]]
xarray/plot/utils.py:283: note:     def linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[False] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., axis: SupportsIndex = ...) -> ndarray[Any, dtype[Any]]
xarray/plot/utils.py:283: note:     def linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]]], bool, int, float, _NestedSequence[Union[bool, int, float]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any]]]]], bool, int, float, _NestedSequence[Union[bool, int, float]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[True] = ..., dtype: None = ..., axis: SupportsIndex = ...) -> tuple[ndarray[Any, dtype[floating[Any]]], floating[Any]]
xarray/plot/utils.py:283: note:     def linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[True] = ..., dtype: None = ..., axis: SupportsIndex = ...) -> tuple[ndarray[Any, dtype[complexfloating[Any, Any]]], complexfloating[Any, Any]]
xarray/plot/utils.py:283: note:     def [_SCT <: generic] linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[True] = ..., dtype: Union[dtype[_SCT], type[_SCT], _SupportsDType[dtype[_SCT]]] = ..., axis: SupportsIndex = ...) -> tuple[ndarray[Any, dtype[_SCT]], _SCT]
xarray/plot/utils.py:283: note:     def linspace(start: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], stop: Union[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], floating[Any], complexfloating[Any, Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], num: SupportsIndex = ..., endpoint: bool = ..., retstep: Literal[True] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., axis: SupportsIndex = ...) -> tuple[ndarray[Any, dtype[Any]], Any]
xarray/plot/utils.py:288: error: Unsupported operand types for - ("Hashable" and "int")  [operator]
xarray/plot/utils.py: note: In function "legend_elements":
xarray/plot/utils.py:1036: error: Need type annotation for "handles" (hint: "handles: List[<type>] = ...")  [var-annotated]
xarray/plot/utils.py:1037: error: Need type annotation for "labels" (hint: "labels: List[<type>] = ...")  [var-annotated]
xarray/plot/utils.py:1055: error: "LineCollection" has no attribute "get_linewidths"  [attr-defined]
xarray/plot/utils.py:1101: error: Argument 1 to "FixedLocator" has incompatible type "Iterable[Any]"; expected "Sequence[float]"  [arg-type]
xarray/plot/utils.py:1109: error: Incompatible types in assignment (expression has type "Sequence[float]", variable has type "ndarray[Any, dtype[Any]]")  [assignment]
xarray/plot/utils.py:1132: error: "Sequence[float]" has no attribute "astype"  [attr-defined]
xarray/core/common.py: note: In member "__init_subclass__" of class "AttrAccessMixin":
xarray/core/common.py:253: error: Cannot assign to a method  [method-assign]
xarray/core/rolling.py: note: In member "_bottleneck_reduce" of class "DataArrayRolling":
xarray/core/rolling.py:533: error: Unsupported operand types for * ("tuple[slice]" and "tuple[int, ...]")  [operator]
xarray/core/rolling.py:533: note: Right operand is of type "Union[int, tuple[int, ...]]"
xarray/core/rolling.py:534: error: Invalid index type "Union[int, tuple[int, ...]]" for "tuple[int, ...]"; expected type "SupportsIndex"  [index]
xarray/core/rolling.py:534: note: Left operand is of type "Union[tuple[slice, ...], Any]"
xarray/core/rolling.py:538: error: Unsupported operand types for * ("tuple[slice]" and "tuple[int, ...]")  [operator]
xarray/core/rolling.py:538: note: Right operand is of type "Union[int, tuple[int, ...]]"
xarray/core/variable.py: note: In member "load" of class "Variable":
xarray/core/variable.py:505: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[Any]]", variable has type "T_DuckArray")  [assignment]
xarray/core/variable.py: note: In member "_validate_indexers" of class "Variable":
xarray/core/variable.py:674: error: Invalid index type "Union[int, tuple[int, ...]]" for "tuple[int, ...]"; expected type "SupportsIndex"  [index]
xarray/core/variable.py: note: In member "_broadcast_indexes_vectorized" of class "Variable":
xarray/core/variable.py:724: error: Need type annotation for "out_dims_set"  [var-annotated]
xarray/core/variable.py:740: error: Need type annotation for "variable_dims" (hint: "variable_dims: Set[<type>] = ...")  [var-annotated]
xarray/core/variable.py:744: error: Need type annotation for "slices" (hint: "slices: List[<type>] = ...")  [var-annotated]
xarray/core/variable.py: note: In member "_getitem_with_mask" of class "Variable":
xarray/core/variable.py:838: error: Module has no attribute "moveaxis"  [attr-defined]
xarray/core/variable.py: note: In member "_shift_one_dim" of class "Variable":
xarray/core/variable.py:1158: error: Unsupported operand types for * ("tuple[slice]" and "tuple[int, ...]")  [operator]
xarray/core/variable.py:1158: note: Right operand is of type "Union[int, tuple[int, ...]]"
xarray/core/variable.py:1165: error: Invalid index type "Union[int, tuple[int, ...]]" for "tuple[int, ...]"; expected type "SupportsIndex"  [index]
xarray/core/variable.py:1180: error: "ndarray[Any, dtype[Any]]" has no attribute "rechunk"  [attr-defined]
xarray/core/variable.py: note: In member "_roll_one_dim" of class "Variable":
xarray/core/variable.py:1334: error: Invalid index type "Union[int, tuple[int, ...]]" for "tuple[int, ...]"; expected type "SupportsIndex"  [index]
xarray/core/variable.py:1340: error: Unsupported operand types for * ("tuple[slice]" and "tuple[int, ...]")  [operator]
xarray/core/variable.py:1340: note: Right operand is of type "Union[int, tuple[int, ...]]"
xarray/core/variable.py: note: In member "rolling_window" of class "Variable":
xarray/core/variable.py:2229: error: No overload variant of "sliding_window_view" matches argument types "Any", "Any", "tuple[Union[int, tuple[int, ...]], ...]"  [call-overload]
xarray/core/variable.py:2229: note: Possible overload variants:
xarray/core/variable.py:2229: note:     def [_SCT <: generic] sliding_window_view(x: Union[_SupportsArray[dtype[_SCT]], _NestedSequence[_SupportsArray[dtype[_SCT]]]], window_shape: Union[int, Iterable[int]], axis: Optional[SupportsIndex] = ..., *, subok: bool = ..., writeable: bool = ...) -> ndarray[Any, dtype[_SCT]]
xarray/core/variable.py:2229: note:     def sliding_window_view(x: Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], window_shape: Union[int, Iterable[int]], axis: Optional[SupportsIndex] = ..., *, subok: bool = ..., writeable: bool = ...) -> ndarray[Any, dtype[Any]]
xarray/core/variable.py: note: In member "__init__" of class "IndexVariable":
xarray/core/variable.py:2626: error: Incompatible types in assignment (expression has type "PandasIndexingAdapter", variable has type "T_DuckArray")  [assignment]
xarray/core/variable.py: note: In member "concat" of class "IndexVariable":
xarray/core/variable.py:2720: error: "list[Any]" has no attribute "take"  [attr-defined]
xarray/plot/dataset_plot.py: note: In function "_dsplot":
xarray/plot/dataset_plot.py:318: error: "Callable[[Dataset, VarArg(Any), DefaultNamedArg(Optional[Hashable], 'x'), DefaultNamedArg(Optional[Hashable], 'y'), DefaultNamedArg(Optional[Hashable], 'u'), DefaultNamedArg(Optional[Hashable], 'v'), DefaultNamedArg(Optional[Hashable], 'hue'), DefaultNamedArg(Optional[Literal['continuous', 'discrete']], 'hue_style'), DefaultNamedArg(Optional[Hashable], 'row'), DefaultNamedArg(Optional[Hashable], 'col'), DefaultNamedArg(Optional[int], 'col_wrap'), DefaultNamedArg(Optional[Axes], 'ax'), DefaultNamedArg(Optional[Iterable[float]], 'figsize'), DefaultNamedArg(Optional[float], 'size'), DefaultNamedArg(Union[float, None, Literal['auto', 'equal']], 'aspect'), DefaultNamedArg(bool, 'sharex'), DefaultNamedArg(bool, 'sharey'), DefaultNamedArg(Optional[bool], 'add_guide'), DefaultNamedArg(Optional[dict[str, Any]], 'subplot_kws'), DefaultNamedArg(Optional[dict[str, Any]], 'cbar_kwargs'), DefaultNamedArg(Optional[Axes], 'cbar_ax'), DefaultNamedArg(Union[str, Colormap, None], 'cmap'), DefaultNamedArg(Optional[float], 'vmin'), DefaultNamedArg(Optional[float], 'vmax'), DefaultNamedArg(Optional[Normalize], 'norm'), DefaultNamedArg(Optional[bool], 'infer_intervals'), DefaultNamedArg(Optional[float], 'center'), DefaultNamedArg(Optional[bool], 'robust'), DefaultNamedArg(Union[str, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None], 'colors'), DefaultNamedArg(Optional[Literal['neither', 'both', 'min', 'max']], 'extend'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'levels'), KwArg(Any)], Any]" has no attribute "__wrapped__"  [attr-defined]
xarray/core/merge.py: note: In function "merge_attrs":
xarray/core/merge.py:599: error: Incompatible types in assignment (expression has type "MutableMapping[Any, Any]", variable has type "dict[Any, Any]")  [assignment]
xarray/core/concat.py: note: In function "_calc_concat_over":
xarray/core/concat.py:303: error: Need type annotation for "equals" (hint: "equals: Dict[<type>, <type>] = ...")  [var-annotated]
xarray/coding/cftimeindex.py: note: In function "format_attrs":
xarray/coding/cftimeindex.py:280: error: Incompatible types in assignment (expression has type "str", variable has type "list[str]")  [assignment]
xarray/backends/common.py: note: In function "find_root_and_group":
xarray/backends/common.py:134: error: Incompatible types in assignment (expression has type "tuple[Any]", variable has type "tuple[]")  [assignment]
xarray/backends/common.py: note: In member "sync" of class "ArrayWriter":
xarray/backends/common.py:261: error: Argument "flush" to "store" of "ChunkManagerEntrypoint" has incompatible type "bool"; expected "dict[str, Any]"  [arg-type]
xarray/backends/common.py:262: error: Argument "regions" to "store" of "ChunkManagerEntrypoint" has incompatible type "list[Any]"; expected "dict[str, Any]"  [arg-type]
xarray/backends/common.py: note: In member "set_variables" of class "AbstractWritableDataStore":
xarray/backends/common.py:394: error: "AbstractWritableDataStore" has no attribute "prepare_variable"  [attr-defined]
xarray/backends/common.py: note: In member "set_dimensions" of class "AbstractWritableDataStore":
xarray/backends/common.py:418: error: Need type annotation for "dims" (hint: "dims: Dict[<type>, <type>] = ...")  [var-annotated]
xarray/backends/common.py:432: error: Too many arguments for "set_dimension"  [call-arg]
xarray/plot/dataarray_plot.py: note: In function "_plot1d":
xarray/plot/dataarray_plot.py:1081: error: "Callable[[DataArray, VarArg(Any), DefaultNamedArg(Optional[Hashable], 'x'), DefaultNamedArg(Optional[Hashable], 'y'), DefaultNamedArg(Optional[Hashable], 'z'), DefaultNamedArg(Optional[Hashable], 'hue'), DefaultNamedArg(Optional[Literal['continuous', 'discrete']], 'hue_style'), DefaultNamedArg(Optional[Hashable], 'markersize'), DefaultNamedArg(Optional[Hashable], 'linewidth'), DefaultNamedArg(Optional[Hashable], 'row'), DefaultNamedArg(Optional[Hashable], 'col'), DefaultNamedArg(Optional[int], 'col_wrap'), DefaultNamedArg(Optional[Axes], 'ax'), DefaultNamedArg(Optional[Iterable[float]], 'figsize'), DefaultNamedArg(Optional[float], 'size'), DefaultNamedArg(Optional[float], 'aspect'), DefaultNamedArg(Optional[bool], 'xincrease'), DefaultNamedArg(Optional[bool], 'yincrease'), DefaultNamedArg(Optional[bool], 'add_legend'), DefaultNamedArg(Optional[bool], 'add_colorbar'), DefaultNamedArg(Union[bool, Iterable[bool]], 'add_labels'), DefaultNamedArg(bool, 'add_title'), DefaultNamedArg(Optional[dict[str, Any]], 'subplot_kws'), DefaultNamedArg(Optional[Literal['linear', 'symlog', 'log', 'logit']], 'xscale'), DefaultNamedArg(Optional[Literal['linear', 'symlog', 'log', 'logit']], 'yscale'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'xticks'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'yticks'), DefaultNamedArg(Optional[tuple[float, float]], 'xlim'), DefaultNamedArg(Optional[tuple[float, float]], 'ylim'), DefaultNamedArg(Union[str, Colormap, None], 'cmap'), DefaultNamedArg(Optional[float], 'vmin'), DefaultNamedArg(Optional[float], 'vmax'), DefaultNamedArg(Optional[Normalize], 'norm'), DefaultNamedArg(Optional[Literal['neither', 'both', 'min', 'max']], 'extend'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'levels'), KwArg(Any)], Any]" has no attribute "__wrapped__"  [attr-defined]
xarray/plot/dataarray_plot.py: note: In function "_plot2d":
xarray/plot/dataarray_plot.py:1670: error: "Callable[[DataArray, VarArg(Any), DefaultNamedArg(Optional[Hashable], 'x'), DefaultNamedArg(Optional[Hashable], 'y'), DefaultNamedArg(Optional[Iterable[float]], 'figsize'), DefaultNamedArg(Optional[float], 'size'), DefaultNamedArg(Optional[float], 'aspect'), DefaultNamedArg(Optional[Axes], 'ax'), DefaultNamedArg(Optional[Hashable], 'row'), DefaultNamedArg(Optional[Hashable], 'col'), DefaultNamedArg(Optional[int], 'col_wrap'), DefaultNamedArg(Optional[bool], 'xincrease'), DefaultNamedArg(Optional[bool], 'yincrease'), DefaultNamedArg(Optional[bool], 'add_colorbar'), DefaultNamedArg(bool, 'add_labels'), DefaultNamedArg(Optional[float], 'vmin'), DefaultNamedArg(Optional[float], 'vmax'), DefaultNamedArg(Union[str, Colormap, None], 'cmap'), DefaultNamedArg(Optional[float], 'center'), DefaultNamedArg(bool, 'robust'), DefaultNamedArg(Optional[Literal['neither', 'both', 'min', 'max']], 'extend'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'levels'), DefaultNamedArg(Any, 'infer_intervals'), DefaultNamedArg(Union[str, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None], 'colors'), DefaultNamedArg(Optional[dict[str, Any]], 'subplot_kws'), DefaultNamedArg(Optional[Axes], 'cbar_ax'), DefaultNamedArg(Optional[dict[str, Any]], 'cbar_kwargs'), DefaultNamedArg(Optional[Literal['linear', 'symlog', 'log', 'logit']], 'xscale'), DefaultNamedArg(Optional[Literal['linear', 'symlog', 'log', 'logit']], 'yscale'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'xticks'), DefaultNamedArg(Optional[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]], 'yticks'), DefaultNamedArg(Optional[tuple[float, float]], 'xlim'), DefaultNamedArg(Optional[tuple[float, float]], 'ylim'), DefaultNamedArg(Optional[Normalize], 'norm'), KwArg(Any)], Any]" has no attribute "__wrapped__"  [attr-defined]
xarray/core/missing.py: note: In member "__init__" of class "NumpyInterpolator":
xarray/core/missing.py:101: error: Incompatible types in assignment (expression has type "Hashable", variable has type "complex")  [assignment]
xarray/core/missing.py:102: error: Incompatible types in assignment (expression has type "Hashable", variable has type "complex")  [assignment]
xarray/core/missing.py: note: In function "_chunked_aware_interpnd":
xarray/core/missing.py:807: error: Incompatible types in assignment (expression has type "tuple[Any, ...]", variable has type "list[Variable]")  [assignment]
xarray/core/missing.py: note: In function "decompose_interp":
xarray/core/missing.py:823: error: Need type annotation for "partial_indexes_coords" (hint: "partial_indexes_coords: Dict[<type>, <type>] = ...")  [var-annotated]
xarray/coding/cftime_offsets.py: note: In member "__add__" of class "BaseCFTimeOffset":
xarray/coding/cftime_offsets.py:122: error: Too many arguments for "__apply__"  [call-arg]
xarray/coding/cftime_offsets.py: note: In function "to_offset":
xarray/coding/cftime_offsets.py:744: error: Item "None" of "Optional[Match[str]]" has no attribute "groupdict"  [union-attr]
xarray/coding/cftime_offsets.py:751: error: "object" not callable  [operator]
xarray/core/dataset.py: note: In function "_get_func_args":
xarray/core/dataset.py:347: error: Incompatible types in assignment (expression has type "dict[<nothing>, <nothing>]", variable has type "MappingProxyType[str, Parameter]")  [assignment]
xarray/core/dataset.py: note: In member "__dask_graph__" of class "Dataset":
xarray/core/dataset.py:863: error: Module "dask" has no attribute "sharedict"  [attr-defined]
xarray/core/dataset.py: note: In member "_get_indexers_coords_and_indexes" of class "Dataset":
xarray/core/dataset.py:2765: error: Argument 1 to "merge_coordinates_without_align" has incompatible type "list[DataArrayCoordinates[Any]]"; expected "list[Coordinates]"  [arg-type]
xarray/core/dataset.py:2765: note: "List" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance
xarray/core/dataset.py:2765: note: Consider using "Sequence" instead, which is covariant
xarray/core/dataset.py: note: In member "_integrate_one" of class "Dataset":
xarray/core/dataset.py:8323: error: Incompatible types in assignment (expression has type "list[Hashable]", variable has type "tuple[Hashable, ...]")  [assignment]
xarray/core/dataset.py:8324: error: "tuple[Hashable, ...]" has no attribute "remove"  [attr-defined]
xarray/testing.py: note: In function "assert_equal":
xarray/testing.py:87: error: Argument 1 to "equals" of "DataArray" has incompatible type "Union[Any, Coordinates]"; expected "DataArray"  [arg-type]
xarray/testing.py:89: error: Argument 1 to "equals" of "Dataset" has incompatible type "Union[Any, Coordinates]"; expected "Dataset"  [arg-type]
xarray/testing.py: note: In function "assert_identical":
xarray/testing.py:121: error: Item "Coordinates" of "Union[Any, Coordinates]" has no attribute "name"  [union-attr]
xarray/testing.py:122: error: Argument 1 to "identical" of "DataArray" has incompatible type "Union[Any, Coordinates]"; expected "DataArray"  [arg-type]
xarray/testing.py:124: error: Argument 1 to "identical" of "Dataset" has incompatible type "Union[Any, Coordinates]"; expected "Dataset"  [arg-type]
xarray/testing.py: note: In function "assert_allclose":
xarray/testing.py:163: error: "partial[Any]" has no attribute "__name__"; maybe "__new__"?  [attr-defined]
xarray/testing.py: note: In function "assert_duckarray_equal":
xarray/testing.py:240: error: "bool" has no attribute "all"  [attr-defined]
xarray/core/combine.py: note: In function "_ensure_same_types":
xarray/core/combine.py:65: error: Incompatible types in assignment (expression has type "str", variable has type "set[Any]")  [assignment]
xarray/core/combine.py: note: In function "_infer_concat_order_from_coords":
xarray/core/combine.py:140: error: List comprehension has incompatible type List[tuple[Any]]; expected List[tuple[]]  [misc]
xarray/backends/zarr.py: note: In member "get_dimensions" of class "ZarrStore":
xarray/backends/zarr.py:530: error: Need type annotation for "dimensions" (hint: "dimensions: Dict[<type>, <type>] = ...")  [var-annotated]
xarray/backends/scipy_.py: note: In member "__init__" of class "ScipyDataStore":
xarray/backends/scipy_.py:164: error: Incompatible types in assignment (expression has type "DummyFileManager", variable has type "CachingFileManager")  [assignment]
xarray/backends/pseudonetcdf_.py: note: In member "open" of class "PseudoNetCDFDataStore":
xarray/backends/pseudonetcdf_.py:70: error: Argument 4 to "CachingFileManager" has incompatible type "**dict[str, dict[str, Any]]"; expected "Optional[Hashable]"  [arg-type]
xarray/backends/pseudonetcdf_.py:70: note: Following member(s) of "dict[str, dict[str, Any]]" have conflicts:
xarray/backends/pseudonetcdf_.py:70: note:     __hash__: expected "Callable[[], int]", got "None"
xarray/backends/netCDF4_.py: note: In member "_getitem" of class "NetCDF4ArrayWrapper":
xarray/backends/netCDF4_.py:108: error: Incompatible types in assignment (expression has type overloaded function, variable has type "partial[Any]")  [assignment]
xarray/backends/h5netcdf_.py: note: In member "open" of class "H5NetCDFStore":
xarray/backends/h5netcdf_.py:155: error: If x = b'abc' then f"{x}" or "{}".format(x) produces "b'abc'", not "abc". If this is desired behavior, use f"{x!r}" or "{!r}".format(x). Otherwise, decode the bytes  [str-bytes-safe]
xarray/backends/api.py: note: In function "_validate_attrs":
xarray/backends/api.py:177: error: Incompatible types in assignment (expression has type "tuple[type[str], type[Number], type[ndarray[Any, Any]], type[number[Any]], type[list[Any]], type[tuple[Any, ...]], type[bool_]]", variable has type "tuple[type[str], type[Number], type[ndarray[Any, Any]], type[number[Any]], type[list[Any]], type[tuple[Any, ...]]]")  [assignment]
xarray/backends/api.py: note: In function "_protect_dataset_variables_inplace":
xarray/backends/api.py:241: error: Incompatible types in assignment (expression has type "MemoryCachedArray", variable has type "CopyOnWriteArray")  [assignment]
xarray/convert.py: note: In function "from_iris":
xarray/convert.py:271: error: Incompatible types in assignment (expression has type "tuple[tuple[], Any, Any]", target has type "tuple[list[Any], Any, Any]")  [assignment]
xarray/core/groupby.py: note: In function "_dummy_copy":
xarray/core/groupby.py:128: error: Incompatible types in assignment (expression has type "DataArray", variable has type "Dataset")  [assignment]
xarray/core/groupby.py: note: In member "_binary_op" of class "GroupBy":
xarray/core/groupby.py:856: error: Incompatible types in assignment (expression has type "Union[IndexVariable, _DummyGroup[Any]]", variable has type "DataArray")  [assignment]
xarray/core/groupby.py:888: error: Unexpected keyword argument "drop" for "where"  [call-arg]
xarray/core/variable.py:1681: note: "where" defined here
xarray/core/groupby.py:856: error: Incompatible types in assignment (expression has type "Union[IndexVariable, _DummyGroup[Any]]", variable has type "DataArray")  [assignment]
xarray/core/groupby.py:888: error: Unexpected keyword argument "drop" for "where"  [call-arg]
xarray/core/groupby.py:903: error: Incompatible types in assignment (expression has type "int", target has type "tuple[int, ...]")  [assignment]
xarray/core/groupby.py:918: error: Value of type variable "T_DataArrayOrSet" of "broadcast_like" of "DataArray" cannot be "Union[DataArray, Any, IndexVariable]"  [type-var]
xarray/core/variable.py:1681: note: "where" defined here
xarray/core/groupby.py:903: error: Incompatible types in assignment (expression has type "int", target has type "tuple[int, ...]")  [assignment]
xarray/core/groupby.py:918: error: Value of type variable "T_DataArrayOrSet" of "broadcast_like" of "DataArray" cannot be "Union[DataArray, Any, IndexVariable]"  [type-var]
xarray/core/groupby.py: note: In member "assign_coords" of class "GroupBy":
xarray/core/groupby.py:1283: error: Incompatible types in assignment (expression has type "Mapping[Hashable, Any]", variable has type "dict[str, Any]")  [assignment]
xarray/core/groupby.py: note: In function "_restore_dim_order":
xarray/core/groupby.py:1340: error: Incompatible types in assignment (expression has type "float", variable has type "Union[int, tuple[int, ...]]")  [assignment]
xarray/tests/test_weighted.py: note: In function "test_weighted_weights_nan_raises_dask":
xarray/tests/test_weighted.py:47: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_weighted.py: note: In function "test_weighted_operations_3D":
xarray/tests/test_weighted.py:613: error: Incompatible types in assignment (expression has type "DataArray", variable has type "ndarray[Any, dtype[floating[_64Bit]]]")  [assignment]
xarray/tests/test_weighted.py:617: error: "ndarray[Any, dtype[floating[_64Bit]]]" has no attribute "to_dataset"  [attr-defined]
xarray/tests/test_weighted.py: note: In function "test_weighted_operations_different_shapes":
xarray/tests/test_weighted.py:714: error: Incompatible types in assignment (expression has type "DataArray", variable has type "ndarray[Any, dtype[floating[_64Bit]]]")  [assignment]
xarray/tests/test_weighted.py:719: error: "ndarray[Any, dtype[floating[_64Bit]]]" has no attribute "to_dataset"  [attr-defined]
xarray/tests/test_weighted.py: note: In function "test_weighted_operations_keep_attr":
xarray/tests/test_weighted.py:735: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_weighted.py: note: In function "test_weighted_operations_keep_attr_da_in_ds":
xarray/tests/test_weighted.py:762: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_weighted.py:766: error: Incompatible types in assignment (expression has type "float", target has type "bool")  [assignment]
xarray/tests/test_weighted.py: note: In function "test_weighted_bad_dim":
xarray/tests/test_weighted.py:779: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_weighted.py:783: error: Incompatible types in assignment (expression has type "float", target has type "str")  [assignment]
xarray/tests/test_variable.py: note: In member "test_1d_reduce" of class "VariableSubclassobjects":
xarray/tests/test_variable.py:403: error: "Variable" has no attribute "sum"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_aggregate_complex" of class "VariableSubclassobjects":
xarray/tests/test_variable.py:663: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_getitem_advanced" of class "VariableSubclassobjects":
xarray/tests/test_variable.py:731: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[Any]]", variable has type "Variable")  [assignment]
xarray/tests/test_variable.py: note: In member "test_numpy_same_methods" of class "TestVariable":
xarray/tests/test_variable.py:1095: error: "Variable" has no attribute "item"  [attr-defined]
xarray/tests/test_variable.py:1096: error: "Variable" has no attribute "item"  [attr-defined]
xarray/tests/test_variable.py:1099: error: "IndexVariable" has no attribute "searchsorted"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_reduce" of class "TestVariable":
xarray/tests/test_variable.py:1786: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1789: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_reduce_use_bottleneck" of class "TestVariable":
xarray/tests/test_variable.py:1803: error: "Variable" has no attribute "min"  [attr-defined]
xarray/tests/test_variable.py:1806: error: "Variable" has no attribute "min"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_big_endian_reduce" of class "TestVariable":
xarray/tests/test_variable.py:1933: error: "Variable" has no attribute "sum"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_reduce_funcs" of class "TestVariable":
xarray/tests/test_variable.py:1937: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1938: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1939: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1942: error: "Variable" has no attribute "prod"  [attr-defined]
xarray/tests/test_variable.py:1943: error: "Variable" has no attribute "cumsum"  [attr-defined]
xarray/tests/test_variable.py:1944: error: "Variable" has no attribute "cumprod"  [attr-defined]
xarray/tests/test_variable.py:1945: error: "Variable" has no attribute "var"  [attr-defined]
xarray/tests/test_variable.py:1946: error: "Variable" has no attribute "median"  [attr-defined]
xarray/tests/test_variable.py:1949: error: "Variable" has no attribute "any"  [attr-defined]
xarray/tests/test_variable.py:1950: error: "Variable" has no attribute "all"  [attr-defined]
xarray/tests/test_variable.py:1955: error: "Variable" has no attribute "max"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_reduce_keepdims" of class "TestVariable":
xarray/tests/test_variable.py:1961: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1964: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1968: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1972: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1978: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_reduce_keepdims_dask" of class "TestVariable":
xarray/tests/test_variable.py:1987: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:1993: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_reduce_keep_attrs" of class "TestVariable":
xarray/tests/test_variable.py:2005: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py:2010: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_count" of class "TestVariable":
xarray/tests/test_variable.py:2028: error: "Variable" has no attribute "count"  [attr-defined]
xarray/tests/test_variable.py:2032: error: "Variable" has no attribute "count"  [attr-defined]
xarray/tests/test_variable.py:2035: error: "Variable" has no attribute "count"  [attr-defined]
xarray/tests/test_variable.py:2040: error: "Variable" has no attribute "count"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_coarsen_2d" of class "TestIndexVariable":
xarray/tests/test_variable.py:2522: error: "test_coarsen_2d" undefined in superclass  [misc]
xarray/tests/test_variable.py: note: In member "test_unchanged_types" of class "TestAsCompatibleData":
xarray/tests/test_variable.py:2543: error: "object" not callable  [operator]
xarray/tests/test_variable.py: note: In member "test_converted_types" of class "TestAsCompatibleData":
xarray/tests/test_variable.py:2548: error: Need type annotation for "actual"  [var-annotated]
xarray/tests/test_variable.py: note: In member "test_masked_array" of class "TestAsCompatibleData":
xarray/tests/test_variable.py:2554: error: Need type annotation for "original"  [var-annotated]
xarray/tests/test_variable.py:2556: error: Need type annotation for "actual"  [var-annotated]
xarray/tests/test_variable.py:2561: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[floating[Any]]]", variable has type "ndarray[Any, dtype[signedinteger[Any]]]")  [assignment]
xarray/tests/test_variable.py:2569: error: Incompatible types in assignment (expression has type "list[float]", variable has type "ndarray[Any, dtype[signedinteger[Any]]]")  [assignment]
xarray/tests/test_variable.py:2576: error: Incompatible types in assignment (expression has type "Variable", variable has type "ndarray[Any, dtype[signedinteger[Any]]]")  [assignment]
xarray/tests/test_variable.py: note: In member "test_datetime" of class "TestAsCompatibleData":
xarray/tests/test_variable.py:2583: error: Need type annotation for "actual"  [var-annotated]
xarray/tests/test_variable.py:2588: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[Any]]", variable has type "datetime64")  [assignment]
xarray/tests/test_variable.py:2592: error: <nothing> has no attribute "dtype"  [attr-defined]
xarray/tests/test_variable.py:2594: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[Any]]", variable has type "datetime64")  [assignment]
xarray/tests/test_variable.py:2598: error: <nothing> has no attribute "dtype"  [attr-defined]
xarray/tests/test_variable.py: note: In member "test_unsupported_type" of class "TestAsCompatibleData":
xarray/tests/test_variable.py:2717: error: Incompatible types in assignment (expression has type "CustomWithValuesAttr", variable has type "CustomArray")  [assignment]
xarray/tests/test_utils.py: note: In member "test" of class "TestAlias":
xarray/tests/test_utils.py:20: error: Unsupported right operand type for in ("Optional[str]")  [operator]
xarray/tests/test_utils.py: note: In member "test_dict_equiv" of class "TestDictionaries":
xarray/tests/test_utils.py:101: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[Any]]", target has type "int")  [assignment]
xarray/tests/test_utils.py:104: error: Incompatible types in assignment (expression has type "int", target has type "ndarray[Any, dtype[Any]]")  [assignment]
xarray/tests/test_utils.py:106: error: Incompatible types in assignment (expression has type "list[int]", target has type "ndarray[Any, dtype[Any]]")  [assignment]
xarray/tests/test_utils.py:108: error: Incompatible types in assignment (expression has type "list[float]", target has type "int")  [assignment]
xarray/tests/test_utils.py:110: error: Incompatible types in assignment (expression has type "None", target has type "int")  [assignment]
xarray/tests/test_utils.py:112: error: Incompatible types in assignment (expression has type "float", target has type "int")  [assignment]
xarray/tests/test_utils.py:113: error: Incompatible types in assignment (expression has type "float", target has type "ndarray[Any, dtype[Any]]")  [assignment]
xarray/tests/test_utils.py:115: error: Incompatible types in assignment (expression has type "float", target has type "int")  [assignment]
xarray/tests/test_utils.py:116: error: Incompatible types in assignment (expression has type "float", target has type "ndarray[Any, dtype[Any]]")  [assignment]
xarray/tests/test_utils.py: note: In member "test_frozen" of class "TestDictionaries":
xarray/tests/test_utils.py:126: error: Unsupported target for indexed assignment ("Frozen[str, str]")  [index]
xarray/tests/test_utils.py:128: error: "Frozen[str, str]" has no attribute "__delitem__"; maybe "__getitem__"?  [attr-defined]
xarray/tests/test_utils.py:130: error: "Frozen[str, str]" has no attribute "update"  [attr-defined]
xarray/tests/test_utils.py: note: In function "test_either_dict_or_kwargs":
xarray/tests/test_utils.py:218: error: Argument 2 to "either_dict_or_kwargs" has incompatible type "None"; expected "Mapping[str, int]"  [arg-type]
xarray/tests/test_ufuncs.py: note: In function "test_binary":
xarray/tests/test_ufuncs.py:41: error: Unsupported operand types for + ("object" and "int")  [operator]
xarray/tests/test_ufuncs.py:41: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "object", "int"  [call-overload]
xarray/tests/test_ufuncs.py:41: note: Possible overload variants:
xarray/tests/test_ufuncs.py:41: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:41: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:42: error: Unsupported operand types for + ("object" and "int")  [operator]
xarray/tests/test_ufuncs.py:42: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "object", "int"  [call-overload]
xarray/tests/test_ufuncs.py:42: note: Possible overload variants:
xarray/tests/test_ufuncs.py:42: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:42: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:43: error: Unsupported operand types for + ("object" and "int")  [operator]
xarray/tests/test_ufuncs.py:43: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "int", "object"  [call-overload]
xarray/tests/test_ufuncs.py:43: note: Possible overload variants:
xarray/tests/test_ufuncs.py:43: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:43: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:44: error: Unsupported operand types for + ("object" and "int")  [operator]
xarray/tests/test_ufuncs.py:44: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "int", "object"  [call-overload]
xarray/tests/test_ufuncs.py:44: note: Possible overload variants:
xarray/tests/test_ufuncs.py:44: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:44: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py: note: In function "test_binary_out":
xarray/tests/test_ufuncs.py:56: error: No overload variant of "__call__" of "_UFunc_Nin1_Nout2" matches argument type "object"  [call-overload]
xarray/tests/test_ufuncs.py:56: note: Possible overload variants:
xarray/tests/test_ufuncs.py:56: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], None = ..., None = ..., /, *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> tuple[Any, Any]
xarray/tests/test_ufuncs.py:56: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Optional[ndarray[Any, dtype[Any]]] = ..., Optional[ndarray[Any, dtype[Any]]] = ..., /, *, out: tuple[ndarray[Any, dtype[Any]], ndarray[Any, dtype[Any]]] = ..., where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> tuple[ndarray[Any, dtype[Any]], ndarray[Any, dtype[Any]]]
xarray/tests/test_ufuncs.py:56: note:     def __call__(self, _SupportsArrayUFunc, Optional[ndarray[Any, dtype[Any]]] = ..., Optional[ndarray[Any, dtype[Any]]] = ..., /, *, out: tuple[ndarray[Any, dtype[Any]], ndarray[Any, dtype[Any]]] = ..., where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> tuple[Any, Any]
xarray/tests/test_ufuncs.py:57: error: Unsupported operand types for * ("float" and "object")  [operator]
xarray/tests/test_ufuncs.py: note: In function "test_groupby":
xarray/tests/test_ufuncs.py:67: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DatasetGroupBy", "Dataset"  [call-overload]
xarray/tests/test_ufuncs.py:67: note: Possible overload variants:
xarray/tests/test_ufuncs.py:67: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:67: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:68: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "Dataset", "DatasetGroupBy"  [call-overload]
xarray/tests/test_ufuncs.py:68: note: Possible overload variants:
xarray/tests/test_ufuncs.py:68: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:68: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:70: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DataArrayGroupBy", "Dataset"  [call-overload]
xarray/tests/test_ufuncs.py:70: note: Possible overload variants:
xarray/tests/test_ufuncs.py:70: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:70: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:71: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "Dataset", "DataArrayGroupBy"  [call-overload]
xarray/tests/test_ufuncs.py:71: note: Possible overload variants:
xarray/tests/test_ufuncs.py:71: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:71: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:73: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DatasetGroupBy", "DataArray"  [call-overload]
xarray/tests/test_ufuncs.py:73: note: Possible overload variants:
xarray/tests/test_ufuncs.py:73: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:73: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:74: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DataArray", "DatasetGroupBy"  [call-overload]
xarray/tests/test_ufuncs.py:74: note: Possible overload variants:
xarray/tests/test_ufuncs.py:74: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:74: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:76: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DataArrayGroupBy", "Any"  [call-overload]
xarray/tests/test_ufuncs.py:76: note: Possible overload variants:
xarray/tests/test_ufuncs.py:76: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:76: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:77: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "Any", "DataArrayGroupBy"  [call-overload]
xarray/tests/test_ufuncs.py:77: note: Possible overload variants:
xarray/tests/test_ufuncs.py:77: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:77: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:80: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "Any", "DatasetGroupBy"  [call-overload]
xarray/tests/test_ufuncs.py:80: note: Possible overload variants:
xarray/tests/test_ufuncs.py:80: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:80: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py: note: In function "test_alignment":
xarray/tests/test_ufuncs.py:87: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "Dataset", "Dataset"  [call-overload]
xarray/tests/test_ufuncs.py:87: note: Possible overload variants:
xarray/tests/test_ufuncs.py:87: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:87: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:92: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "Dataset", "Dataset"  [call-overload]
xarray/tests/test_ufuncs.py:92: note: Possible overload variants:
xarray/tests/test_ufuncs.py:92: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:92: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py: note: In function "test_xarray_defers_to_unrecognized_type":
xarray/tests/test_ufuncs.py:112: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DataArray", "Other"  [call-overload]
xarray/tests/test_ufuncs.py:112: note: Possible overload variants:
xarray/tests/test_ufuncs.py:112: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:112: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:113: error: No overload variant of "__call__" of "_UFunc_Nin1_Nout1" matches argument types "DataArray", "Other"  [call-overload]
xarray/tests/test_ufuncs.py:113: note: Possible overload variants:
xarray/tests/test_ufuncs.py:113: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:113: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_ufuncs.py:113: note:     def __call__(self, _SupportsArrayUFunc, /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py: note: In function "test_xarray_handles_dask":
xarray/tests/test_ufuncs.py:121: error: "ndarray[Any, dtype[Any]]" has no attribute "chunks"  [attr-defined]
xarray/tests/test_ufuncs.py: note: In function "test_dask_defers_to_xarray":
xarray/tests/test_ufuncs.py:130: error: "ndarray[Any, dtype[Any]]" has no attribute "chunks"  [attr-defined]
xarray/tests/test_ufuncs.py: note: In function "test_out":
xarray/tests/test_ufuncs.py:145: error: No overload variant of "__call__" of "_UFunc_Nin2_Nout1" matches argument types "DataArray", "int", "DataArray"  [call-overload]
xarray/tests/test_ufuncs.py:145: note: Possible overload variants:
xarray/tests/test_ufuncs.py:145: note:     def __call__(self, Union[int, float, complex, str, bytes, generic], Union[int, float, complex, str, bytes, generic], /, out: None = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> Any
xarray/tests/test_ufuncs.py:145: note:     def __call__(self, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], /, out: Union[None, ndarray[Any, dtype[Any]], tuple[ndarray[Any, dtype[Any]]]] = ..., *, where: Union[None, _SupportsArray[dtype[bool_]], _NestedSequence[_SupportsArray[dtype[bool_]]], bool, _NestedSequence[bool]] = ..., casting: Literal['no', 'equiv', 'safe', 'same_kind', 'unsafe'] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]] = ..., subok: bool = ..., signature: Union[str, tuple[Optional[str], Optional[str], Optional[str]]] = ..., extobj: list[Any] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_sparse.py: note: In member "test_missing_values" of class "TestSparseVariable":
xarray/tests/test_sparse.py:310: error: "Variable" has no attribute "count"  [attr-defined]
xarray/tests/test_sparse.py: note: In member "test_concat" of class "TestSparseDataArrayAndDataset":
xarray/tests/test_sparse.py:651: error: Incompatible types in assignment (expression has type "DataArray", variable has type "Dataset")  [assignment]
xarray/tests/test_sparse.py: note: In member "test_coarsen" of class "TestSparseDataArrayAndDataset":
xarray/tests/test_sparse.py:739: error: "DataArrayCoarsen" has no attribute "mean"  [attr-defined]
xarray/tests/test_sparse.py:740: error: "DataArrayCoarsen" has no attribute "mean"  [attr-defined]
xarray/tests/test_sparse.py: note: In member "test_dot" of class "TestSparseDataArrayAndDataset":
xarray/tests/test_sparse.py:767: error: "TestSparseDataArrayAndDataset" has no attribute "xp_xr"; maybe "sp_xr"?  [attr-defined]
xarray/tests/test_sparse.py: note: In member "test_reindex" of class "TestSparseDataArrayAndDataset":
xarray/tests/test_sparse.py:821: error: Argument after ** must be a mapping, not "object"  [arg-type]
xarray/tests/test_sparse.py:822: error: Argument after ** must be a mapping, not "object"  [arg-type]
xarray/tests/test_sparse.py: note: In member "test_where" of class "TestSparseDataArrayAndDataset":
xarray/tests/test_sparse.py:842: error: Incompatible types in assignment (expression has type "DataArray", variable has type "ndarray[Any, dtype[bool_]]")  [assignment]
xarray/tests/test_plot.py: note: In function "text_in_fig":
xarray/tests/test_plot.py:92: error: "Artist" has no attribute "get_text"  [attr-defined]
xarray/tests/test_plot.py: note: In member "test_discrete_colormap_provided_boundary_norm" of class "TestDiscreteColorMap":
xarray/tests/test_plot.py:1234: error: No overload variant of "assert_allclose" matches argument types "Iterable[float]", "ndarray[Any, Any]"  [call-overload]
xarray/tests/test_plot.py:1234: note: Possible overload variants:
xarray/tests/test_plot.py:1234: note:     def assert_allclose(actual: Union[Union[_SupportsArray[dtype[Union[bool_, number[Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, number[Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], Union[_SupportsArray[dtype[object_]], _NestedSequence[_SupportsArray[dtype[object_]]]]], desired: Union[Union[_SupportsArray[dtype[Union[bool_, number[Any]]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, number[Any]]]]], bool, int, float, complex, _NestedSequence[Union[bool, int, float, complex]]], Union[_SupportsArray[dtype[object_]], _NestedSequence[_SupportsArray[dtype[object_]]]]], rtol: float = ..., atol: float = ..., equal_nan: bool = ..., err_msg: str = ..., verbose: bool = ...) -> None
xarray/tests/test_plot.py:1234: note:     def assert_allclose(actual: Union[_SupportsArray[dtype[Union[bool_, integer[Any], timedelta64]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], timedelta64]]]], bool, int, _NestedSequence[Union[bool, int]]], desired: Union[_SupportsArray[dtype[Union[bool_, integer[Any], timedelta64]]], _NestedSequence[_SupportsArray[dtype[Union[bool_, integer[Any], timedelta64]]]], bool, int, _NestedSequence[Union[bool, int]]], rtol: float = ..., atol: float = ..., equal_nan: bool = ..., err_msg: str = ..., verbose: bool = ...) -> None
xarray/tests/test_plot.py: note: In member "test_discrete_colormap_provided_boundary_norm_matching_cmap_levels" of class "TestDiscreteColorMap":
xarray/tests/test_plot.py:1241: error: Item "None" of "Optional[Colorbar]" has no attribute "norm"  [union-attr]
xarray/tests/test_plot.py:1241: error: Item "Normalize" of "Union[Normalize, Any]" has no attribute "Ncmap"  [union-attr]
xarray/tests/test_plot.py:1241: error: Item "Normalize" of "Union[Normalize, Any]" has no attribute "N"  [union-attr]
xarray/tests/test_plot.py: note: In function "test_get_axis_raises":
xarray/tests/test_plot.py:3092: error: Argument "ax" to "get_axis" has incompatible type "str"; expected "Optional[Axes]"  [arg-type]
xarray/tests/test_plot.py:3096: error: Argument "ax" to "get_axis" has incompatible type "str"; expected "Optional[Axes]"  [arg-type]
xarray/tests/test_plot.py:3108: error: Argument "ax" to "get_axis" has incompatible type "int"; expected "Optional[Axes]"  [arg-type]
xarray/tests/test_parallelcompat.py: note: In member "__array_finalize__" of class "DummyChunkedArray":
xarray/tests/test_parallelcompat.py:46: error: Incompatible types in assignment (expression has type "Optional[Any]", variable has type "tuple[tuple[int, ...], ...]")  [assignment]
xarray/tests/test_missing.py: note: In function "test_interpolate_unsorted_index_raises":
xarray/tests/test_missing.py:191: error: Argument "method" to "interpolate_na" of "DataArray" has incompatible type "Literal['index']"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_missing.py: note: In function "test_interpolate_invalid_interpolator_raises":
xarray/tests/test_missing.py:203: error: Argument "method" to "interpolate_na" of "DataArray" has incompatible type "Literal['foo']"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_missing.py: note: In function "test_interpolate_duplicate_values_raises":
xarray/tests/test_missing.py:210: error: Argument "method" to "interpolate_na" of "DataArray" has incompatible type "Literal['foo']"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_missing.py: note: In function "test_interpolate_methods":
xarray/tests/test_missing.py:318: error: Need type annotation for "kwargs" (hint: "kwargs: Dict[<type>, <type>] = ...")  [var-annotated]
xarray/tests/test_missing.py:323: error: Argument "method" to "interpolate_na" of "DataArray" has incompatible type "str"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_missing.py:326: error: Argument "method" to "interpolate_na" of "DataArray" has incompatible type "str"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_indexing.py: note: In function "get_indexers":
xarray/tests/test_indexing.py:597: error: Incompatible types in assignment (expression has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], int, slice]", variable has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [assignment]
xarray/tests/test_indexing.py:601: error: Incompatible types in assignment (expression has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], int, slice]", variable has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [assignment]
xarray/tests/test_indexing.py:605: error: Incompatible types in assignment (expression has type "list[slice]", variable has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [assignment]
xarray/tests/test_indexing.py:606: error: Unsupported target for indexed assignment ("tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [index]
xarray/tests/test_indexing.py:610: error: Incompatible types in assignment (expression has type "list[slice]", variable has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [assignment]
xarray/tests/test_indexing.py:611: error: Unsupported target for indexed assignment ("tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [index]
xarray/tests/test_indexing.py:618: error: Incompatible types in assignment (expression has type "list[int]", variable has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [assignment]
xarray/tests/test_indexing.py:622: error: Incompatible types in assignment (expression has type "list[slice]", variable has type "tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [assignment]
xarray/tests/test_indexing.py:623: error: Unsupported target for indexed assignment ("tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [index]
xarray/tests/test_indexing.py:624: error: Unsupported target for indexed assignment ("tuple[ndarray[Any, dtype[signedinteger[Any]]], ...]")  [index]
xarray/tests/test_indexing.py: note: In function "test_indexing_dask_array_scalar":
xarray/tests/test_indexing.py:855: error: Argument 1 to "isel" of "DataArray" has incompatible type "Union[DataArray, dict[Hashable, DataArray]]"; expected "Optional[Mapping[Any, Any]]"  [arg-type]
xarray/tests/test_groupby.py: note: In function "test_groupby_dataset_where":
xarray/tests/test_groupby.py:1015: error: Incompatible types in assignment (expression has type "list[Union[float, int]]", variable has type "ndarray[Any, Any]")  [assignment]
xarray/tests/test_groupby.py: note: In member "test_groupby_properties" of class "TestDataArrayGroupBy":
xarray/tests/test_groupby.py:1122: error: Argument 2 to "assert_array_equal" has incompatible type "Union[int, slice, list[int]]"; expected "Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]"  [arg-type]
xarray/tests/test_groupby.py: note: In member "test_groupby_map_ndarray" of class "TestDataArrayGroupBy":
xarray/tests/test_groupby.py:1283: error: Argument 1 to "map" of "DataArrayGroupByBase" has incompatible type overloaded function; expected "Callable[..., DataArray]"  [arg-type]
xarray/tests/test_groupby.py: note: In member "test_groupby_math" of class "TestDataArrayGroupBy":
xarray/tests/test_groupby.py:1328: error: Value of type variable "T_Xarray" of "__add__" of "DataArrayGroupByOpsMixin" cannot be "int"  [type-var]
xarray/tests/test_groupby.py:1330: error: Value of type variable "T_Xarray" of "__add__" of "DataArrayGroupByOpsMixin" cannot be "DataArrayGroupBy"  [type-var]
xarray/tests/test_groupby.py:1332: error: Argument 1 to "__iadd__" of "DataArrayOpsMixin" has incompatible type "DataArrayGroupBy"; expected "Union[DataArray, Union[Variable, Union[Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], generic, ndarray[Any, Any], Array]]]"  [arg-type]
xarray/tests/test_groupby.py: note: In member "test_groupby_math_not_aligned" of class "TestDataArrayGroupBy":
xarray/tests/test_groupby.py:1355: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_groupby.py:1357: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_groupby.py: note: In member "test_resample_bad_resample_dim" of class "TestDataArrayResample":
xarray/tests/test_groupby.py:1736: error: Argument 1 to "resample" of "DataArray" has incompatible type "**dict[str, str]"; expected "Optional[Mapping[Any, str]]"  [arg-type]
xarray/tests/test_groupby.py:1736: error: Argument 1 to "resample" of "DataArray" has incompatible type "**dict[str, str]"; expected "Optional[bool]"  [arg-type]
xarray/tests/test_groupby.py:1736: error: Argument 1 to "resample" of "DataArray" has incompatible type "**dict[str, str]"; expected "Optional[Literal['left', 'right']]"  [arg-type]
xarray/tests/test_groupby.py:1736: error: Argument 1 to "resample" of "DataArray" has incompatible type "**dict[str, str]"; expected "Optional[int]"  [arg-type]
xarray/tests/test_groupby.py: note: In member "test_upsample_tolerance" of class "TestDataArrayResample":
xarray/tests/test_groupby.py:1889: error: Argument "tolerance" has incompatible type "str"; expected "Union[float, Iterable[float], None]"  [arg-type]
xarray/tests/test_groupby.py:1889: note: Following member(s) of "str" have conflicts:
xarray/tests/test_groupby.py:1889: note:     Expected:
xarray/tests/test_groupby.py:1889: note:         def __iter__(self) -> Iterator[float]
xarray/tests/test_groupby.py:1889: note:     Got:
xarray/tests/test_groupby.py:1889: note:         def __iter__(self) -> Iterator[str]
xarray/tests/test_groupby.py:1894: error: Argument "tolerance" has incompatible type "str"; expected "Union[float, Iterable[float], None]"  [arg-type]
xarray/tests/test_groupby.py:1894: note: Following member(s) of "str" have conflicts:
xarray/tests/test_groupby.py:1894: note:     Expected:
xarray/tests/test_groupby.py:1894: note:         def __iter__(self) -> Iterator[float]
xarray/tests/test_groupby.py:1894: note:     Got:
xarray/tests/test_groupby.py:1894: note:         def __iter__(self) -> Iterator[str]
xarray/tests/test_groupby.py:1899: error: Argument "tolerance" to "nearest" of "Resample" has incompatible type "str"; expected "Union[float, Iterable[float], None]"  [arg-type]
xarray/tests/test_groupby.py:1899: note: Following member(s) of "str" have conflicts:
xarray/tests/test_groupby.py:1899: note:     Expected:
xarray/tests/test_groupby.py:1899: note:         def __iter__(self) -> Iterator[float]
xarray/tests/test_groupby.py:1899: note:     Got:
xarray/tests/test_groupby.py:1899: note:         def __iter__(self) -> Iterator[str]
xarray/tests/test_groupby.py: note: In member "test_upsample_interpolate" of class "TestDataArrayResample":
xarray/tests/test_groupby.py:1920: error: Argument 1 to "interpolate" of "Resample" has incompatible type "str"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_groupby.py: note: In member "test_upsample_interpolate_dask" of class "TestDataArrayResample":
xarray/tests/test_groupby.py:1985: error: Argument 1 to "interpolate" of "Resample" has incompatible type "str"; expected "Union[Literal['linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'polynomial'], Literal['barycentric', 'krogh', 'pchip', 'spline', 'akima']]"  [arg-type]
xarray/tests/test_groupby.py: note: In member "test_resample_old_api" of class "TestDatasetResample":
xarray/tests/test_groupby.py:2227: error: Argument 1 to "resample" of "Dataset" has incompatible type "str"; expected "Optional[Mapping[Any, str]]"  [arg-type]
xarray/tests/test_groupby.py:2227: error: Argument 2 to "resample" of "Dataset" has incompatible type "str"; expected "Optional[bool]"  [arg-type]
xarray/tests/test_groupby.py:2230: error: Argument 1 to "resample" of "Dataset" has incompatible type "str"; expected "Optional[Mapping[Any, str]]"  [arg-type]
xarray/tests/test_groupby.py:2233: error: Argument 1 to "resample" of "Dataset" has incompatible type "str"; expected "Optional[Mapping[Any, str]]"  [arg-type]
xarray/tests/test_duck_array_ops.py: note: In function "test_datetime_to_numeric_datetime64":
xarray/tests/test_duck_array_ops.py:760: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[floating[Any]]]", variable has type "ndarray[Any, dtype[signedinteger[Any]]]")  [assignment]
xarray/tests/test_duck_array_ops.py: note: In function "test_datetime_to_numeric_cftime":
xarray/tests/test_duck_array_ops.py:793: error: Incompatible types in assignment (expression has type "ndarray[Any, dtype[floating[Any]]]", variable has type "ndarray[Any, dtype[signedinteger[Any]]]")  [assignment]
xarray/tests/test_dataarray.py: note: In member "test_properties" of class "TestDataArray":
xarray/tests/test_dataarray.py:156: error: Property "variable" defined in "DataArray" is read-only  [misc]
xarray/tests/test_dataarray.py: note: In member "test_head" of class "TestDataArray":
xarray/tests/test_dataarray.py:1198: error: Argument 1 to "head" of "DataArray" has incompatible type "list[int]"; expected "Union[Mapping[Any, int], int, None]"  [arg-type]
xarray/tests/test_dataarray.py: note: In member "test_tail" of class "TestDataArray":
xarray/tests/test_dataarray.py:1215: error: Argument 1 to "tail" of "DataArray" has incompatible type "list[int]"; expected "Union[Mapping[Any, int], int, None]"  [arg-type]
xarray/tests/test_dataarray.py: note: In member "test_thin" of class "TestDataArray":
xarray/tests/test_dataarray.py:1228: error: Argument 1 to "thin" of "DataArray" has incompatible type "list[int]"; expected "Union[Mapping[Any, int], int, None]"  [arg-type]
xarray/tests/test_dataarray.py: note: In member "test_astype_attrs" of class "TestDataArray":
xarray/tests/test_dataarray.py:2231: error: "object" has no attribute "attrs"  [attr-defined]
xarray/tests/test_dataarray.py:2232: error: "object" has no attribute "attrs"  [attr-defined]
xarray/tests/test_dataarray.py:2232: error: "object" has no attribute "astype"  [attr-defined]
xarray/tests/test_dataarray.py:2233: error: "object" has no attribute "astype"  [attr-defined]
xarray/tests/test_dataarray.py: note: In member "test_reduce_keep_attrs" of class "TestDataArray":
xarray/tests/test_dataarray.py:2917: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_dataarray.py:2922: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_coordinates.py: note: In member "test_equals" of class "TestCoordinates":
xarray/tests/test_coordinates.py:124: error: Argument 1 to "equals" of "Coordinates" has incompatible type "str"; expected "Coordinates"  [arg-type]
xarray/tests/test_coordinates.py: note: In member "test_identical" of class "TestCoordinates":
xarray/tests/test_coordinates.py:130: error: Argument 1 to "identical" of "Coordinates" has incompatible type "str"; expected "Coordinates"  [arg-type]
xarray/tests/test_computation.py: note: In function "test_keep_attrs_strategies_dataarray_variables":
xarray/tests/test_computation.py:930: error: "None" not callable  [misc]
xarray/tests/test_computation.py:952: error: "None" not callable  [misc]
xarray/tests/test_computation.py: note: In function "test_keep_attrs_strategies_dataset_variables":
xarray/tests/test_computation.py:1095: error: "None" not callable  [misc]
xarray/tests/test_computation.py:1114: error: "None" not callable  [misc]
xarray/tests/test_coding_times.py: note: In function "test_decode_0size_datetime":
xarray/tests/test_coding_times.py:1168: error: No overload variant of "array" matches argument types "list[<nothing>]", "object"  [call-overload]
xarray/tests/test_coding_times.py:1168: note: Possible overload variants:
xarray/tests/test_coding_times.py:1168: note:     def [_ArrayType <: ndarray[Any, dtype[Any]]] array(object: _ArrayType, dtype: None = ..., *, copy: Union[bool, _CopyMode] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., subok: Literal[True], ndmin: int = ..., like: Optional[_SupportsArrayFunc] = ...) -> _ArrayType
xarray/tests/test_coding_times.py:1168: note:     def [_SCT <: generic] array(object: Union[_SupportsArray[dtype[_SCT]], _NestedSequence[_SupportsArray[dtype[_SCT]]]], dtype: None = ..., *, copy: Union[bool, _CopyMode] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., subok: bool = ..., ndmin: int = ..., like: Optional[_SupportsArrayFunc] = ...) -> ndarray[Any, dtype[_SCT]]
xarray/tests/test_coding_times.py:1168: note:     def array(object: object, dtype: None = ..., *, copy: Union[bool, _CopyMode] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., subok: bool = ..., ndmin: int = ..., like: Optional[_SupportsArrayFunc] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_coding_times.py:1168: note:     def [_SCT <: generic] array(object: Any, dtype: Union[dtype[_SCT], type[_SCT], _SupportsDType[dtype[_SCT]]], *, copy: Union[bool, _CopyMode] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., subok: bool = ..., ndmin: int = ..., like: Optional[_SupportsArrayFunc] = ...) -> ndarray[Any, dtype[_SCT]]
xarray/tests/test_coding_times.py:1168: note:     def array(object: Any, dtype: Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, Union[tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]]], *, copy: Union[bool, _CopyMode] = ..., order: Optional[Literal['K', 'A', 'C', 'F']] = ..., subok: bool = ..., ndmin: int = ..., like: Optional[_SupportsArrayFunc] = ...) -> ndarray[Any, dtype[Any]]
xarray/tests/test_coarsen.py: note: In function "test_coarsen_coords":
xarray/tests/test_coarsen.py:65: error: "DataArrayCoarsen" has no attribute "mean"  [attr-defined]
xarray/tests/test_coarsen.py: note: In function "test_coarsen_coords_cftime":
xarray/tests/test_coarsen.py:72: error: "DataArrayCoarsen" has no attribute "mean"  [attr-defined]
xarray/tests/test_coarsen.py: note: In member "test_coarsen_construct_keeps_all_coords" of class "TestCoarsenConstruct":
xarray/tests/test_coarsen.py:340: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_units.py: note: In function "array_attach_units":
xarray/tests/test_units.py:101: error: Module has no attribute "_exceptions"  [attr-defined]
xarray/tests/test_units.py: note: In function "strip_units":
xarray/tests/test_units.py:163: error: Incompatible types in assignment (expression has type "DataArray", variable has type "Dataset")  [assignment]
xarray/tests/test_units.py:168: error: Incompatible types in assignment (expression has type "Variable", variable has type "Dataset")  [assignment]
xarray/tests/test_units.py: note: In function "attach_units":
xarray/tests/test_units.py:211: error: Incompatible types in assignment (expression has type "DataArray", variable has type "Dataset")  [assignment]
xarray/tests/test_units.py:218: error: Incompatible types in assignment (expression has type "Variable", variable has type "Dataset")  [assignment]
xarray/tests/test_units.py: note: In function "convert_units":
xarray/tests/test_units.py:254: error: Incompatible types in assignment (expression has type "DataArray", variable has type "Dataset")  [assignment]
xarray/tests/test_units.py:259: error: Incompatible types in assignment (expression has type "Variable", variable has type "Dataset")  [assignment]
xarray/tests/test_units.py: note: In member "__call__" of class "method":
xarray/tests/test_units.py:326: error: Incompatible types in assignment (expression has type "Optional[Any]", variable has type "partial[Any]")  [assignment]
xarray/tests/test_units.py: note: In function "test_apply_ufunc_dataarray":
xarray/tests/test_units.py:392: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_apply_ufunc_dataset":
xarray/tests/test_units.py:425: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_align_dataarray":
xarray/tests/test_units.py:499: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_align_dataset":
xarray/tests/test_units.py:603: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_combine_by_coords":
xarray/tests/test_units.py:752: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_combine_nested":
xarray/tests/test_units.py:829: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_concat_dataarray":
xarray/tests/test_units.py:935: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_concat_dataset":
xarray/tests/test_units.py:1003: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_merge_dataarray":
xarray/tests/test_units.py:1069: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_merge_dataset":
xarray/tests/test_units.py:1173: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_replication_dataarray":
xarray/tests/test_units.py:1247: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_replication_dataset":
xarray/tests/test_units.py:1283: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_replication_full_like_dataarray":
xarray/tests/test_units.py:1332: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In function "test_replication_full_like_dataset":
xarray/tests/test_units.py:1373: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_aggregate_complex" of class "TestVariable":
xarray/tests/test_units.py:1564: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_units.py: note: In member "test_searchsorted" of class "TestVariable":
xarray/tests/test_units.py:2070: error: "Variable" has no attribute "searchsorted"  [attr-defined]
xarray/tests/test_units.py:2078: error: "Variable" has no attribute "searchsorted"  [attr-defined]
xarray/tests/test_units.py: note: In member "test_where" of class "TestDataArray":
xarray/tests/test_units.py:2926: error: Item "None" of "Optional[dict[str, Any]]" has no attribute "items"  [union-attr]
xarray/tests/test_units.py:2931: error: Argument after ** must be a mapping, not "Optional[dict[str, Any]]"  [arg-type]
xarray/tests/test_units.py:2939: error: Argument after ** must be a mapping, not "Optional[dict[str, Any]]"  [arg-type]
xarray/tests/test_units.py: note: In member "test_comparisons" of class "TestDataArray":
xarray/tests/test_units.py:3061: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_broadcast_like" of class "TestDataArray":
xarray/tests/test_units.py:3118: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_content_manipulation" of class "TestDataArray":
xarray/tests/test_units.py:3230: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_interp_reindex" of class "TestDataArray":
xarray/tests/test_units.py:3499: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_interp_reindex_like" of class "TestDataArray":
xarray/tests/test_units.py:3574: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_differentiate_integrate" of class "TestDataArray":
xarray/tests/test_units.py:3751: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_computation" of class "TestDataArray":
xarray/tests/test_units.py:3812: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_computation_objects" of class "TestDataArray":
xarray/tests/test_units.py:3876: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_grouped_operations" of class "TestDataArray":
xarray/tests/test_units.py:3939: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_init" of class "TestDataset":
xarray/tests/test_units.py:4020: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py:4024: error: Argument "coords" to "DataArray" has incompatible type "Union[object, Any]"; expected "Union[Sequence[Union[Sequence[Any], Any, DataArray]], Mapping[Any, Any], None]"  [arg-type]
xarray/tests/test_units.py:4025: error: Argument "coords" to "DataArray" has incompatible type "Union[object, Any]"; expected "Union[Sequence[Union[Sequence[Any], Any, DataArray]], Mapping[Any, Any], None]"  [arg-type]
xarray/tests/test_units.py: note: In member "test_repr" of class "TestDataset":
xarray/tests/test_units.py:4078: error: Argument "coords" to "Dataset" has incompatible type "object"; expected "Optional[Mapping[Any, Any]]"  [arg-type]
xarray/tests/test_units.py: note: In member "test_where" of class "TestDataset":
xarray/tests/test_units.py:4438: error: Argument after ** must be a mapping, not "Optional[dict[str, Any]]"  [arg-type]
xarray/tests/test_units.py:4444: error: Item "None" of "Optional[dict[str, Any]]" has no attribute "items"  [union-attr]
xarray/tests/test_units.py:4451: error: Argument after ** must be a mapping, not "Optional[dict[str, Any]]"  [arg-type]
xarray/tests/test_units.py: note: In member "test_combine_first" of class "TestDataset":
xarray/tests/test_units.py:4505: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_comparisons" of class "TestDataset":
xarray/tests/test_units.py:4585: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py:4603: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_broadcast_like" of class "TestDataset":
xarray/tests/test_units.py:4661: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_stacking_stacked" of class "TestDataset":
xarray/tests/test_units.py:4753: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_head_tail_thin" of class "TestDataset":
xarray/tests/test_units.py:5058: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_interp_reindex" of class "TestDataset":
xarray/tests/test_units.py:5140: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_interp_reindex_like" of class "TestDataset":
xarray/tests/test_units.py:5213: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_computation" of class "TestDataset":
xarray/tests/test_units.py:5304: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_computation_objects" of class "TestDataset":
xarray/tests/test_units.py:5363: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py:5381: error: Need type annotation for "kwargs" (hint: "kwargs: Dict[<type>, <type>] = ...")  [var-annotated]
xarray/tests/test_units.py: note: In member "test_resample" of class "TestDataset":
xarray/tests/test_units.py:5405: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_grouped_operations" of class "TestDataset":
xarray/tests/test_units.py:5457: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_content_manipulation" of class "TestDataset":
xarray/tests/test_units.py:5531: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_merge" of class "TestDataset":
xarray/tests/test_units.py:5602: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py:5609: error: "None" object is not iterable  [misc]
xarray/tests/test_units.py: note: In member "test_units_facetgrid_2d_contourf_plot_colorbar_labels" of class "TestPlots":
xarray/tests/test_units.py:5772: error: Item "None" of "Optional[Colorbar]" has no attribute "ax"  [union-attr]
xarray/tests/test_merge.py: note: In member "test_merge_wrong_input_error" of class "TestMergeFunction":
xarray/tests/test_merge.py:258: error: List item 0 has incompatible type "int"; expected "Union[DataArray, Dataset, Mapping[Any, Union[Union[DataArray, Variable, Union[Any, tuple[Union[Hashable, Sequence[Hashable]], Any], tuple[Union[Hashable, Sequence[Hashable]], Any, Mapping[Any, Any]], tuple[Union[Hashable, Sequence[Hashable]], Any, Mapping[Any, Any], Mapping[Any, Any]]]], Any, Any]]]"  [list-item]
xarray/tests/test_merge.py:261: error: Dict entry 0 has incompatible type "str": "Dataset"; expected "Union[DataArray, Dataset, Mapping[Any, Union[Union[DataArray, Variable, Union[Any, tuple[Union[Hashable, Sequence[Hashable]], Any], tuple[Union[Hashable, Sequence[Hashable]], Any, Mapping[Any, Any]], tuple[Union[Hashable, Sequence[Hashable]], Any, Mapping[Any, Any], Mapping[Any, Any]]]], Any, Any]]]": "Dataset"  [dict-item]
xarray/tests/test_merge.py:263: error: List item 1 has incompatible type "int"; expected "Union[DataArray, Dataset, Mapping[Any, Union[Union[DataArray, Variable, Union[Any, tuple[Union[Hashable, Sequence[Hashable]], Any], tuple[Union[Hashable, Sequence[Hashable]], Any, Mapping[Any, Any]], tuple[Union[Hashable, Sequence[Hashable]], Any, Mapping[Any, Any], Mapping[Any, Any]]]], Any, Any]]]"  [list-item]
xarray/tests/test_merge.py: note: In member "test_merge_compat" of class "TestMergeMethod":
xarray/tests/test_merge.py:369: error: Argument "compat" to "merge" of "Dataset" has incompatible type "str"; expected "Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal']"  [arg-type]
xarray/tests/test_merge.py:374: error: Argument "compat" to "merge" of "Dataset" has incompatible type "str"; expected "Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal']"  [arg-type]
xarray/tests/test_merge.py:381: error: Argument "compat" to "merge" of "Dataset" has incompatible type "Literal['foobar']"; expected "Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal']"  [arg-type]
xarray/tests/test_concat.py: note: In member "test_concat_coords" of class "TestConcatDataset":
xarray/tests/test_concat.py:558: error: No overload variant of "concat" matches argument types "list[Dataset]", "str", "Sequence[str]"  [call-overload]
xarray/tests/test_concat.py:558: note: Possible overload variants:
xarray/tests/test_concat.py:558: note:     def [T_Dataset <: Dataset, T_DataArray <: DataArray] concat(objs: Iterable[T_Dataset], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_Dataset
xarray/tests/test_concat.py:558: note:     def [T_DataArray <: DataArray] concat(objs: Iterable[T_DataArray], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_DataArray
xarray/tests/test_concat.py:562: error: No overload variant of "concat" matches argument types "list[Dataset]", "str", "Sequence[str]"  [call-overload]
xarray/tests/test_concat.py:562: note: Possible overload variants:
xarray/tests/test_concat.py:562: note:     def [T_Dataset <: Dataset, T_DataArray <: DataArray] concat(objs: Iterable[T_Dataset], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_Dataset
xarray/tests/test_concat.py:562: note:     def [T_DataArray <: DataArray] concat(objs: Iterable[T_DataArray], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_DataArray
xarray/tests/test_concat.py: note: In member "test_concat_errors" of class "TestConcatDataset":
xarray/tests/test_concat.py:633: error: No overload variant of "concat" matches argument types "list[Dataset]", "str", "str"  [call-overload]
xarray/tests/test_concat.py:633: note: Possible overload variants:
xarray/tests/test_concat.py:633: note:     def [T_Dataset <: Dataset, T_DataArray <: DataArray] concat(objs: Iterable[T_Dataset], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_Dataset
xarray/tests/test_concat.py:633: note:     def [T_DataArray <: DataArray] concat(objs: Iterable[T_DataArray], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_DataArray
xarray/tests/test_concat.py:636: error: No overload variant of "concat" matches argument types "list[Dataset]", "str", "str"  [call-overload]
xarray/tests/test_concat.py:636: note: Possible overload variants:
xarray/tests/test_concat.py:636: note:     def [T_Dataset <: Dataset, T_DataArray <: DataArray] concat(objs: Iterable[T_Dataset], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_Dataset
xarray/tests/test_concat.py:636: note:     def [T_DataArray <: DataArray] concat(objs: Iterable[T_DataArray], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_DataArray
xarray/tests/test_concat.py: note: In function "test_concat_merge_single_non_dim_coord":
xarray/tests/test_concat.py:1178: error: No overload variant of "concat" matches argument types "list[DataArray]", "str", "str"  [call-overload]
xarray/tests/test_concat.py:1178: note: Possible overload variants:
xarray/tests/test_concat.py:1178: note:     def [T_Dataset <: Dataset, T_DataArray <: DataArray] concat(objs: Iterable[T_Dataset], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_Dataset
xarray/tests/test_concat.py:1178: note:     def [T_DataArray <: DataArray] concat(objs: Iterable[T_DataArray], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_DataArray
xarray/tests/test_concat.py:1189: error: No overload variant of "concat" matches argument types "list[DataArray]", "str", "str"  [call-overload]
xarray/tests/test_concat.py:1189: note: Possible overload variants:
xarray/tests/test_concat.py:1189: note:     def [T_Dataset <: Dataset, T_DataArray <: DataArray] concat(objs: Iterable[T_Dataset], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_Dataset
xarray/tests/test_concat.py:1189: note:     def [T_DataArray <: DataArray] concat(objs: Iterable[T_DataArray], dim: Union[Hashable, T_DataArray, Any], data_vars: Union[Literal['all', 'minimal', 'different'], Iterable[Hashable]] = ..., coords: Union[Literal['all', 'minimal', 'different'], list[Hashable]] = ..., compat: Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal'] = ..., positions: Optional[Iterable[Iterable[int]]] = ..., fill_value: object = ..., join: Literal['outer', 'inner', 'left', 'right', 'exact', 'override'] = ..., combine_attrs: Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']] = ...) -> T_DataArray
xarray/tests/test_combine.py: note: In member "test_auto_combine_2d_combine_attrs_kwarg" of class "TestNestedCombine":
xarray/tests/test_combine.py:536: error: Invalid index type "Callable[[Any, Any], Any]" for "dict[str, Dataset]"; expected type "str"  [index]
xarray/tests/test_combine.py:537: error: Invalid index type "Callable[[Any, Any], Any]" for "dict[str, Dataset]"; expected type "str"  [index]
xarray/tests/test_combine.py:555: error: Argument "combine_attrs" to "combine_nested" has incompatible type "str"; expected "Union[Callable[..., Any], Literal['drop', 'identical', 'no_conflicts', 'drop_conflicts', 'override']]"  [arg-type]
xarray/tests/test_combine.py: note: In member "test_invalid_hypercube_input" of class "TestNestedCombine":
xarray/tests/test_combine.py:581: error: List item 0 has incompatible type "list[Dataset]"; expected "Dataset"  [list-item]
xarray/tests/test_combine.py: note: In member "test_infer_order_from_coords" of class "TestCombineDatasetsbyCoords":
xarray/tests/test_combine.py:955: error: Argument 1 to "broadcast_equals" of "Dataset" has incompatible type "Union[Dataset, DataArray]"; expected "Dataset"  [arg-type]
xarray/tests/test_combine.py: note: In member "test_combine_by_coords_still_fails" of class "TestCombineDatasetsbyCoords":
xarray/tests/test_combine.py:999: error: Argument 2 to "combine_by_coords" has incompatible type "Literal['y']"; expected "Literal['identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override', 'minimal']"  [arg-type]
xarray/tests/test_dask.py: note: In member "test_chunk" of class "TestVariable":
xarray/tests/test_dask.py:102: error: Argument 1 to "chunk" of "Variable" has incompatible type "object"; expected "Union[int, Literal['auto'], tuple[int, ...], tuple[tuple[int, ...], ...], Mapping[Any, Union[None, int, tuple[int, ...]]]]"  [arg-type]
xarray/tests/test_dask.py: note: In member "test_reduce" of class "TestVariable":
xarray/tests/test_dask.py:218: error: "Variable" has no attribute "mean"  [attr-defined]
xarray/tests/test_dask.py:219: error: "Variable" has no attribute "std"  [attr-defined]
xarray/tests/test_dask.py:226: error: "Variable" has no attribute "any"  [attr-defined]
xarray/tests/test_dask.py:227: error: "Variable" has no attribute "all"  [attr-defined]
xarray/tests/test_dask.py:229: error: "Variable" has no attribute "median"  [attr-defined]
xarray/tests/test_dask.py:231: error: "Variable" has no attribute "median"  [attr-defined]
xarray/tests/test_dask.py: note: In member "test_missing_values" of class "TestVariable":
xarray/tests/test_dask.py:243: error: "Variable" has no attribute "count"  [attr-defined]
xarray/tests/test_dask.py: note: In member "test_missing_methods" of class "TestVariable":
xarray/tests/test_dask.py:263: error: "Variable" has no attribute "item"  [attr-defined]
xarray/tests/test_dask.py: note: In member "test_chunk" of class "TestDataArrayAndDataset":
xarray/tests/test_dask.py:360: error: Argument 1 to "chunk" of "DataArray" has incompatible type "object"; expected "Union[int, Literal['auto'], tuple[int, ...], tuple[tuple[int, ...], ...], Mapping[Any, Union[None, int, tuple[int, ...]]]]"  [arg-type]
xarray/tests/test_dask.py:375: error: Incompatible types in assignment (expression has type "Dataset", variable has type "DataArray")  [assignment]
xarray/tests/test_dask.py:375: error: Argument 1 to "chunk" of "Dataset" has incompatible type "object"; expected "Union[int, Literal['auto'], Mapping[Any, Union[None, int, str, tuple[int, ...]]]]"  [arg-type]
xarray/tests/test_dask.py: note: In member "test_reindex" of class "TestDataArrayAndDataset":
xarray/tests/test_dask.py:602: error: Argument after ** must be a mapping, not "object"  [arg-type]
xarray/tests/test_dask.py:603: error: Argument after ** must be a mapping, not "object"  [arg-type]
xarray/tests/test_dask.py: note: In member "test_tokenize_duck_dask_array" of class "TestDataArrayAndDataset":
xarray/tests/test_dask.py:772: error: No overload variant of "Quantity" matches argument types "Any", "Quantity"  [call-overload]
xarray/tests/test_dask.py:772: note: Possible overload variants:
xarray/tests/test_dask.py:772: note:     def Quantity(value: Any, units: Union[str, dict[str, Union[float, int, Decimal, Fraction, number[Any]]], UnitsContainer, PlainUnit, None] = ...) -> Quantity
xarray/tests/test_dask.py:772: note:     def Quantity(value: str, units: Union[str, dict[str, Union[float, int, Decimal, Fraction, number[Any]]], UnitsContainer, PlainUnit, None] = ...) -> Quantity
xarray/tests/test_dask.py:772: note:     def [ScalarT] Quantity(value: Sequence[ScalarT], units: Union[str, dict[str, Union[float, int, Decimal, Fraction, number[Any]]], UnitsContainer, PlainUnit, None] = ...) -> Quantity
xarray/tests/test_dask.py:772: note:     def Quantity(value: PlainQuantity[Any], units: Union[str, dict[str, Union[float, int, Decimal, Fraction, number[Any]]], UnitsContainer, PlainUnit, None] = ...) -> Quantity
xarray/tests/test_dask.py: note: In function "test_map_blocks_error":
xarray/tests/test_dask.py:1150: error: Argument "args" to "map_blocks" has incompatible type "int"; expected "Sequence[Any]"  [arg-type]
xarray/tests/test_dask.py:1153: error: Argument "kwargs" to "map_blocks" has incompatible type "list[int]"; expected "Optional[Mapping[str, Any]]"  [arg-type]
xarray/tests/test_dask.py: note: In function "test_map_blocks_errors_bad_template":
xarray/tests/test_dask.py:1397: error: Argument "template" to "map_blocks" has incompatible type "tuple[Any]"; expected "Union[DataArray, Dataset, None]"  [arg-type]
xarray/tests/test_dask.py: note: In function "test_graph_manipulation":
xarray/tests/test_dask.py:1711: error: "object" has no attribute "__dask_layers__"  [attr-defined]
xarray/tests/test_dask.py:1712: error: "object" has no attribute "__dask_layers__"  [attr-defined]
xarray/tests/test_dask.py:1713: error: "object" has no attribute "__dask_graph__"  [attr-defined]
xarray/tests/test_dask.py:1714: error: "object" has no attribute "__dask_graph__"  [attr-defined]
xarray/tests/test_dask.py:1715: error: "object" has no attribute "__dask_graph__"  [attr-defined]
xarray/tests/test_dask.py:1716: error: "object" has no attribute "__dask_graph__"  [attr-defined]
Found 400 errors in 52 files (checked 147 source files)
