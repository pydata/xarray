name: CI
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch: # allows you to trigger manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-ci-trigger:
    name: detect ci trigger
    runs-on: ubuntu-latest
    if: |
      github.repository == 'pydata/xarray'
      && (github.event_name == 'push' || github.event_name == 'pull_request')
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: xarray-contrib/ci-trigger@v1.1
        id: detect-trigger
        with:
          keyword: "[skip-ci]"
  test:
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: detect-ci-trigger
    env:
      NETCDF_DIR: ${{ github.workspace }}/..
      CC: mpicc.mpich
    if: needs.detect-ci-trigger.outputs.triggered == 'false'
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        # Bookend python versions
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags.
      - name: Set environment variables
        run: |
          if [[ ${{ matrix.os }} == windows* ]] ;
          then
            echo "CONDA_ENV_FILE=ci/requirements/environment-windows.yml" >> $GITHUB_ENV
          else
            echo "CONDA_ENV_FILE=ci/requirements/environment.yml" >> $GITHUB_ENV

          fi
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV

      - name: Cache conda
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-py${{ matrix.python-version }}-${{
            hashFiles('ci/requirements/**.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          channel-priority: strict
          mamba-version: "*"
          activate-environment: xarray-tests
          auto-update-conda: false
          python-version: ${{ matrix.python-version }}
          use-only-tar-bz2: true

      - name: Install conda dependencies
        run: |
          mamba env update -f $CONDA_ENV_FILE

      - name: Install netcdf-c
        if: matrix.os == "windows-latest"
        run: |
          mamba install -c conda-forge autoconf mpich --yes
          git clone https://github.com/bopen/netcdf-c -b fix_nan
          pushd netcdf-c
          export CPPFLAGS="-I/usr/include/hdf5/mpich -I${NETCDF_DIR}/include"
          export LDFLAGS="-L${NETCDF_DIR}/lib"
          export LIBS="-lhdf5_mpich_hl -lhdf5_mpich -lm -lz"
          autoreconf -i
          ./configure --prefix $NETCDF_DIR --enable-netcdf-4 --enable-shared --enable-dap --enable-parallel4
          make -j 2
          make install
          popd

      - name: Install xarray
        run: |
          python -m pip install --no-deps -e .

      - name: Version info
        run: |
          conda info -a
          conda list
          python xarray/util/print_versions.py
      - name: Import xarray
        run: |
          python -c "import xarray"
      - name: Run tests
        run: python -m pytest -n 4
          --cov=xarray
          --cov-report=xml
          --junitxml=pytest.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test results for ${{ runner.os }}-${{ matrix.python-version }}
          path: pytest.xml

      - name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: RUNNER_OS,PYTHON_VERSION
          name: codecov-umbrella
          fail_ci_if_error: false

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    if: github.repository == 'pydata/xarray'
    steps:
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Event File
          path: ${{ github.event_path }}
