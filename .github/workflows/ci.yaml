name: CI
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch: # allows you to trigger manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  detect-ci-trigger:
    name: detect ci trigger
    runs-on: ubuntu-latest
    if: |
      github.repository == 'pydata/xarray'
      && (github.event_name == 'push' || github.event_name == 'pull_request')
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - uses: xarray-contrib/ci-trigger@v1
        id: detect-trigger
        with:
          keyword: "[skip-ci]"

  cache-pixi-lock:
    uses: ./.github/workflows/cache-pixi-lock.yml
  test:
    name: ${{ matrix.os }} py${{ matrix.python-version }} ${{ matrix.pixi-env }}
    runs-on: ${{ matrix.os }}
    needs: [detect-ci-trigger, cache-pixi-lock]
    if: needs.detect-ci-trigger.outputs.triggered == 'false'
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        # Bookend python versions
        pixi-env: ["test-all-deps-py311", "test-all-deps-py313"]
        pytest-adopts: [""]
        include:
          # Minimum python version:
          - pixi-env: "test-bare-minimum"
            os: ubuntu-latest
          - pixi-env: "test-bare-min-and-scipy"
            os: ubuntu-latest
          # - pixi-env: "min-all-deps" # TODO: include later by duplicating old workflow and using conda. Not using Pixi for now.
          #   python-version: "3.11"
          #   os: ubuntu-latest
          # Latest python version:
          - pixi-env: "test-all-but-numba"
            os: ubuntu-latest
          - pixi-env: "test-all-but-dask"
            os: ubuntu-latest
          - pixi-env: "test-all-deps"
            pytest-adopts: "flaky"
            os: ubuntu-latest
          # The mypy tests must be executed using only 1 process in order to guarantee
          # predictable mypy output messages for comparison to expectations.
          - pixi-env: "test-all-mypy-py311"
            pytest-adopts: "mypy"
            numprocesses: 1
            os: ubuntu-latest
          - pixi-env: "test-all-mypy-py313"
            numprocesses: 1
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags.
      - name: Restore cached pixi lockfile
        uses: actions/cache/restore@v4
        id: restore-pixi-lock
        with:
          path: |
            pixi.lock
          key: ${{ needs.cache-pixi-lock.outputs.cache-id }}
      - uses: prefix-dev/setup-pixi@v0.9.0
        with:
          cache: true
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}

      - name: Set Pytest adopts
        run: |
          echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

          if [[ "${{ matrix.pytest-adopts }}" != "" ]] ;
          then
            if [[ "${{ matrix.pytest-adopts }}" == "flaky" ]] ;
            then
              echo "CONDA_ENV_FILE=ci/requirements/environment.yml" >> $GITHUB_ENV
              echo "PYTEST_ADDOPTS=-m 'flaky or network' --run-flaky --run-network-tests -W default" >> $GITHUB_ENV
            elif [[ "${{ matrix.pytest-adopts }}" == "mypy" ]] ;
            then
              echo "CONDA_ENV_FILE=ci/requirements/environment.yml" >> $GITHUB_ENV
              echo "PYTEST_ADDOPTS=-n 1 -m 'mypy' --run-mypy -W default" >> $GITHUB_ENV
            else
              echo "CONDA_ENV_FILE=ci/requirements/${{ matrix.pixi-env }}.yml" >> $GITHUB_ENV
            fi
            if [[ "${{ matrix.pixi-env }}" == "min-all-deps" ]] ;
            then
              # Don't raise on warnings
              echo "PYTEST_ADDOPTS=-W default" >> $GITHUB_ENV
            fi
          fi

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: ${{ env.CONDA_ENV_FILE }}
          environment-name: xarray-tests
          cache-environment: true
          cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{matrix.python-version}}-${{env.TODAY}}-${{hashFiles(env.CONDA_ENV_FILE)}}"
          create-args: >-
            python=${{matrix.python-version}}

      # We only want to install this on one run, because otherwise we'll have
      # duplicate annotations.
      - name: Install error reporter
        if: ${{ matrix.os }} == 'ubuntu-latest' and ${{ matrix.python-version }} == '3.12'
        run: |
          python -m pip install pytest-github-actions-annotate-failures

      - name: Install xarray
        run: |
          python -m pip install --no-deps -e .

      - name: Version info
        run: |
          python xarray/util/print_versions.py

      - name: Import xarray
        run: |
          python -c "import xarray"

      - name: Restore cached hypothesis directory
        uses: actions/cache@v4
        with:
          path: .hypothesis/
          key: cache-hypothesis
          enableCrossOsArchive: true
          save-always: true

      - name: Run tests
        run: python -m pytest -n ${{ matrix.numprocesses || 4 }}
          --timeout 180
          --cov=xarray
          --cov-report=xml
          --junitxml=pytest.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: Test results for OS ${{ runner.os }} | pixi-env -${{ matrix.pixi-env }}
          path: pytest.xml

      - name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v5.5.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: RUNNER_OS
          name: codecov-umbrella
          fail_ci_if_error: false

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    if: github.repository == 'pydata/xarray'
    steps:
      - name: Upload
        uses: actions/upload-artifact@v5
        with:
          name: Event File
          path: ${{ github.event_path }}
