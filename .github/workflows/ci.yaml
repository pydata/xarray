name: CI
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch: # allows you to trigger manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-ci-trigger:
    name: detect ci trigger
    runs-on: ubuntu-latest
    if: |
      github.repository == 'pydata/xarray'
      && (github.event_name == 'push' || github.event_name == 'pull_request')
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: xarray-contrib/ci-trigger@v1
        id: detect-trigger
        with:
          keyword: "[skip-ci]"
  test:
    name: ${{ matrix.os }} py${{ matrix.python-version }} ${{ matrix.env }}
    runs-on: ${{ matrix.os }}
    needs: detect-ci-trigger
    if: needs.detect-ci-trigger.outputs.triggered == 'false'
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        # Bookend python versions
        python-version: ["3.9", "3.11"]
        env: [""]
        include:
          # Minimum python version:
          - env: "bare-minimum"
            python-version: "3.9"
            os: ubuntu-latest
          - env: "min-all-deps"
            python-version: "3.9"
            os: ubuntu-latest
          # Latest python version:
          - env: "all-but-dask"
            python-version: "3.10"
            os: ubuntu-latest
          - env: "flaky"
            python-version: "3.10"
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags.
      - name: Set environment variables
        run: |
          echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

          if [[ "${{matrix.python-version}}" == "3.11" ]]; then
            if [[ ${{matrix.os}} == windows* ]]; then
              echo "CONDA_ENV_FILE=ci/requirements/environment-windows-py311.yml" >> $GITHUB_ENV
            else
              echo "CONDA_ENV_FILE=ci/requirements/environment-py311.yml" >> $GITHUB_ENV
            fi
          elif [[ ${{ matrix.os }} == windows* ]] ;
          then
            echo "CONDA_ENV_FILE=ci/requirements/environment-windows.yml" >> $GITHUB_ENV
          elif [[ "${{ matrix.env }}" != "" ]] ;
          then
            if [[ "${{ matrix.env }}" == "flaky" ]] ;
            then
              echo "CONDA_ENV_FILE=ci/requirements/environment.yml" >> $GITHUB_ENV
              echo "PYTEST_EXTRA_FLAGS=--run-flaky --run-network-tests" >> $GITHUB_ENV
            else
              echo "CONDA_ENV_FILE=ci/requirements/${{ matrix.env }}.yml" >> $GITHUB_ENV
            fi
          else
            echo "CONDA_ENV_FILE=ci/requirements/environment.yml" >> $GITHUB_ENV
          fi

          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ${{ env.CONDA_ENV_FILE }}
          environment-name: xarray-tests
          cache-environment: true
          cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{matrix.python-version}}-${{env.TODAY}}-${{hashFiles(env.CONDA_ENV_FILE)}}"
          create-args: >-
            python=${{matrix.python-version}}
            conda

      # We only want to install this on one run, because otherwise we'll have
      # duplicate annotations.
      - name: Install error reporter
        if: ${{ matrix.os }} == 'ubuntu-latest' and ${{ matrix.python-version }} == '3.10'
        run: |
          python -m pip install pytest-github-actions-annotate-failures

      - name: Install xarray
        run: |
          python -m pip install --no-deps -e .

      - name: Version info
        run: |
          conda info -a
          conda list
          python xarray/util/print_versions.py

      - name: Import xarray
        run: |
          python -c "import xarray"

      - name: Run tests
        run: python -m pytest -n 4
          --timeout 180
          --cov=xarray
          --cov-report=xml
          --junitxml=pytest.xml
          $PYTEST_EXTRA_FLAGS

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test results for ${{ runner.os }}-${{ matrix.python-version }}
          path: pytest.xml

      - name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v3.1.4
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: RUNNER_OS,PYTHON_VERSION
          name: codecov-umbrella
          fail_ci_if_error: false

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    if: github.repository == 'pydata/xarray'
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}
